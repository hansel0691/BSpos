//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BS.Services.com.blackstoneonline.services {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BrokerSoap", Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Response1))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FTResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccessPhone))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReconciliationDetail))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TCAResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Product))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Denomination))]
    public partial class Broker : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSinglePINOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSinglePINSerialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultiplePINOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultiplePINLiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTopUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTopUpWithAdditionalPhonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTopUpFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTopUpFeeWithAdditionalPhonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTopUpFeeSerialOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTopUpFeeSerialWithAdditionalPhonesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoDailyReconciliationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoBillPresentmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoBillPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillerCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterBillersByCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterBillerPaymentOptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillersCategoriesOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterBillersByCategoryOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterBillerPaymentOptionsOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSunPassBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSunPassReplenishmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSunPassReplenishmentByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSunPassDocumentInquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSunPassDocumentInquiryByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSunPassDocumentPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoSunPassDocumentPaymentByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListByProductSbtOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListByProductMainCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductListVersionNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductRatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductLocalPhonesByMerchantIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoBillPaymentOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoBillPaymentOldSerialOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoBillPresentmentOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoBillPresentmentOldSerialOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoDailyReconciliationOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoDailyReconciliationOldSerialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTCATollsBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTCATollsReplenishmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTCATollsReplenishmentByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTCATollsDocumentInquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTCATollsDocumentInquiryByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTCATollsDocumentPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoTCATollsDocumentPaymentByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackGetAccountBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackReplenishAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackReplenishAccountByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackGetLicensePlateAccountBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackReplenishLicensePlateAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackReplenishLicensePlateAccountByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackDocumentInquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackDocumentPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackDocumentInquiryByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackDocumentPaymentByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackOneTimeTollInquiryOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackOneTimeTollPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackOneTimeTollInquiryByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback FastTrackOneTimeTollPaymentByStoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMerchantBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback MetelePinlessVoidLastLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessVoidLastLoadOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessAddPhoneNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessDeletePhoneNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessEditPhoneOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessFindAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessGetCallHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessGetCreditReasonsOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessGetPhoneReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback OKPinlessGetPhoneReportDetailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoPinCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductsCatalogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductProfilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllDestinationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLegalInformationOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Broker() {
            this.Url = global::BS.Services.Properties.Settings.Default.BlackstonePos_Services_com_blackstoneonline_services_Broker;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSinglePINCompletedEventHandler GetSinglePINCompleted;
        
        /// <remarks/>
        public event GetSinglePINSerialCompletedEventHandler GetSinglePINSerialCompleted;
        
        /// <remarks/>
        public event GetMultiplePINCompletedEventHandler GetMultiplePINCompleted;
        
        /// <remarks/>
        public event GetMultiplePINLiteCompletedEventHandler GetMultiplePINLiteCompleted;
        
        /// <remarks/>
        public event VoidOrderCompletedEventHandler VoidOrderCompleted;
        
        /// <remarks/>
        public event DoTopUpCompletedEventHandler DoTopUpCompleted;
        
        /// <remarks/>
        public event DoTopUpWithAdditionalPhonesCompletedEventHandler DoTopUpWithAdditionalPhonesCompleted;
        
        /// <remarks/>
        public event DoTopUpFeeCompletedEventHandler DoTopUpFeeCompleted;
        
        /// <remarks/>
        public event DoTopUpFeeWithAdditionalPhonesCompletedEventHandler DoTopUpFeeWithAdditionalPhonesCompleted;
        
        /// <remarks/>
        public event DoTopUpFeeSerialCompletedEventHandler DoTopUpFeeSerialCompleted;
        
        /// <remarks/>
        public event DoTopUpFeeSerialWithAdditionalPhonesCompletedEventHandler DoTopUpFeeSerialWithAdditionalPhonesCompleted;
        
        /// <remarks/>
        public event DoDailyReconciliationCompletedEventHandler DoDailyReconciliationCompleted;
        
        /// <remarks/>
        public event DoBillPresentmentCompletedEventHandler DoBillPresentmentCompleted;
        
        /// <remarks/>
        public event DoBillPaymentCompletedEventHandler DoBillPaymentCompleted;
        
        /// <remarks/>
        public event GetBillerCategoriesCompletedEventHandler GetBillerCategoriesCompleted;
        
        /// <remarks/>
        public event GetMasterBillersByCategoryCompletedEventHandler GetMasterBillersByCategoryCompleted;
        
        /// <remarks/>
        public event GetMasterBillerPaymentOptionsCompletedEventHandler GetMasterBillerPaymentOptionsCompleted;
        
        /// <remarks/>
        public event GetBillersCategoriesOldCompletedEventHandler GetBillersCategoriesOldCompleted;
        
        /// <remarks/>
        public event GetMasterBillersByCategoryOldCompletedEventHandler GetMasterBillersByCategoryOldCompleted;
        
        /// <remarks/>
        public event GetMasterBillerPaymentOptionsOldCompletedEventHandler GetMasterBillerPaymentOptionsOldCompleted;
        
        /// <remarks/>
        public event GetSunPassBalanceCompletedEventHandler GetSunPassBalanceCompleted;
        
        /// <remarks/>
        public event DoSunPassReplenishmentCompletedEventHandler DoSunPassReplenishmentCompleted;
        
        /// <remarks/>
        public event DoSunPassReplenishmentByStoreCompletedEventHandler DoSunPassReplenishmentByStoreCompleted;
        
        /// <remarks/>
        public event DoSunPassDocumentInquiryCompletedEventHandler DoSunPassDocumentInquiryCompleted;
        
        /// <remarks/>
        public event DoSunPassDocumentInquiryByStoreCompletedEventHandler DoSunPassDocumentInquiryByStoreCompleted;
        
        /// <remarks/>
        public event DoSunPassDocumentPaymentCompletedEventHandler DoSunPassDocumentPaymentCompleted;
        
        /// <remarks/>
        public event DoSunPassDocumentPaymentByStoreCompletedEventHandler DoSunPassDocumentPaymentByStoreCompleted;
        
        /// <remarks/>
        public event GetProductListCompletedEventHandler GetProductListCompleted;
        
        /// <remarks/>
        public event GetProductListByProductSbtCompletedEventHandler GetProductListByProductSbtCompleted;
        
        /// <remarks/>
        public event GetProductListByProductMainCodeCompletedEventHandler GetProductListByProductMainCodeCompleted;
        
        /// <remarks/>
        public event GetProductListVersionNumberCompletedEventHandler GetProductListVersionNumberCompleted;
        
        /// <remarks/>
        public event GetProductRatesCompletedEventHandler GetProductRatesCompleted;
        
        /// <remarks/>
        public event GetProductLocalPhonesByMerchantIdCompletedEventHandler GetProductLocalPhonesByMerchantIdCompleted;
        
        /// <remarks/>
        public event DoBillPaymentOldCompletedEventHandler DoBillPaymentOldCompleted;
        
        /// <remarks/>
        public event DoBillPaymentOldSerialCompletedEventHandler DoBillPaymentOldSerialCompleted;
        
        /// <remarks/>
        public event DoBillPresentmentOldCompletedEventHandler DoBillPresentmentOldCompleted;
        
        /// <remarks/>
        public event DoBillPresentmentOldSerialCompletedEventHandler DoBillPresentmentOldSerialCompleted;
        
        /// <remarks/>
        public event DoDailyReconciliationOldCompletedEventHandler DoDailyReconciliationOldCompleted;
        
        /// <remarks/>
        public event DoDailyReconciliationOldSerialCompletedEventHandler DoDailyReconciliationOldSerialCompleted;
        
        /// <remarks/>
        public event GetTCATollsBalanceCompletedEventHandler GetTCATollsBalanceCompleted;
        
        /// <remarks/>
        public event DoTCATollsReplenishmentCompletedEventHandler DoTCATollsReplenishmentCompleted;
        
        /// <remarks/>
        public event DoTCATollsReplenishmentByStoreCompletedEventHandler DoTCATollsReplenishmentByStoreCompleted;
        
        /// <remarks/>
        public event DoTCATollsDocumentInquiryCompletedEventHandler DoTCATollsDocumentInquiryCompleted;
        
        /// <remarks/>
        public event DoTCATollsDocumentInquiryByStoreCompletedEventHandler DoTCATollsDocumentInquiryByStoreCompleted;
        
        /// <remarks/>
        public event DoTCATollsDocumentPaymentCompletedEventHandler DoTCATollsDocumentPaymentCompleted;
        
        /// <remarks/>
        public event DoTCATollsDocumentPaymentByStoreCompletedEventHandler DoTCATollsDocumentPaymentByStoreCompleted;
        
        /// <remarks/>
        public event FastTrackGetAccountBalanceCompletedEventHandler FastTrackGetAccountBalanceCompleted;
        
        /// <remarks/>
        public event FastTrackReplenishAccountCompletedEventHandler FastTrackReplenishAccountCompleted;
        
        /// <remarks/>
        public event FastTrackReplenishAccountByStoreCompletedEventHandler FastTrackReplenishAccountByStoreCompleted;
        
        /// <remarks/>
        public event FastTrackGetLicensePlateAccountBalanceCompletedEventHandler FastTrackGetLicensePlateAccountBalanceCompleted;
        
        /// <remarks/>
        public event FastTrackReplenishLicensePlateAccountCompletedEventHandler FastTrackReplenishLicensePlateAccountCompleted;
        
        /// <remarks/>
        public event FastTrackReplenishLicensePlateAccountByStoreCompletedEventHandler FastTrackReplenishLicensePlateAccountByStoreCompleted;
        
        /// <remarks/>
        public event FastTrackDocumentInquiryCompletedEventHandler FastTrackDocumentInquiryCompleted;
        
        /// <remarks/>
        public event FastTrackDocumentPaymentCompletedEventHandler FastTrackDocumentPaymentCompleted;
        
        /// <remarks/>
        public event FastTrackDocumentInquiryByStoreCompletedEventHandler FastTrackDocumentInquiryByStoreCompleted;
        
        /// <remarks/>
        public event FastTrackDocumentPaymentByStoreCompletedEventHandler FastTrackDocumentPaymentByStoreCompleted;
        
        /// <remarks/>
        public event FastTrackOneTimeTollInquiryCompletedEventHandler FastTrackOneTimeTollInquiryCompleted;
        
        /// <remarks/>
        public event FastTrackOneTimeTollPaymentCompletedEventHandler FastTrackOneTimeTollPaymentCompleted;
        
        /// <remarks/>
        public event FastTrackOneTimeTollInquiryByStoreCompletedEventHandler FastTrackOneTimeTollInquiryByStoreCompleted;
        
        /// <remarks/>
        public event FastTrackOneTimeTollPaymentByStoreCompletedEventHandler FastTrackOneTimeTollPaymentByStoreCompleted;
        
        /// <remarks/>
        public event GetMerchantBalanceCompletedEventHandler GetMerchantBalanceCompleted;
        
        /// <remarks/>
        public event MetelePinlessVoidLastLoadCompletedEventHandler MetelePinlessVoidLastLoadCompleted;
        
        /// <remarks/>
        public event OKPinlessVoidLastLoadCompletedEventHandler OKPinlessVoidLastLoadCompleted;
        
        /// <remarks/>
        public event OKPinlessAddPhoneNumberCompletedEventHandler OKPinlessAddPhoneNumberCompleted;
        
        /// <remarks/>
        public event OKPinlessBalanceCompletedEventHandler OKPinlessBalanceCompleted;
        
        /// <remarks/>
        public event OKPinlessDeletePhoneNumberCompletedEventHandler OKPinlessDeletePhoneNumberCompleted;
        
        /// <remarks/>
        public event OKPinlessEditPhoneCompletedEventHandler OKPinlessEditPhoneCompleted;
        
        /// <remarks/>
        public event OKPinlessFindAccountCompletedEventHandler OKPinlessFindAccountCompleted;
        
        /// <remarks/>
        public event OKPinlessGetCallHistoryCompletedEventHandler OKPinlessGetCallHistoryCompleted;
        
        /// <remarks/>
        public event OKPinlessGetCreditReasonsCompletedEventHandler OKPinlessGetCreditReasonsCompleted;
        
        /// <remarks/>
        public event OKPinlessGetPhoneReportCompletedEventHandler OKPinlessGetPhoneReportCompleted;
        
        /// <remarks/>
        public event OKPinlessGetPhoneReportDetailedCompletedEventHandler OKPinlessGetPhoneReportDetailedCompleted;
        
        /// <remarks/>
        public event DoPinCreditCompletedEventHandler DoPinCreditCompleted;
        
        /// <remarks/>
        public event GetProductsCatalogCompletedEventHandler GetProductsCatalogCompleted;
        
        /// <remarks/>
        public event GetProductProfilesCompletedEventHandler GetProductProfilesCompleted;
        
        /// <remarks/>
        public event GetAllDestinationsCompletedEventHandler GetAllDestinationsCompleted;
        
        /// <remarks/>
        public event GetLegalInformationCompletedEventHandler GetLegalInformationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetSinglePIN", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSinglePINResult")]
        public PIN[] GetSinglePIN(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int OrderID, int ProfileID, string TransactionMode) {
            object[] results = this.Invoke("GetSinglePIN", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        OrderID,
                        ProfileID,
                        TransactionMode});
            return ((PIN[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSinglePINAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int OrderID, int ProfileID, string TransactionMode) {
            this.GetSinglePINAsync(MID, TID, Password, Cashier, ProductMaincode, ProductDenomination, OrderID, ProfileID, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetSinglePINAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int OrderID, int ProfileID, string TransactionMode, object userState) {
            if ((this.GetSinglePINOperationCompleted == null)) {
                this.GetSinglePINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSinglePINOperationCompleted);
            }
            this.InvokeAsync("GetSinglePIN", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        OrderID,
                        ProfileID,
                        TransactionMode}, this.GetSinglePINOperationCompleted, userState);
        }
        
        private void OnGetSinglePINOperationCompleted(object arg) {
            if ((this.GetSinglePINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSinglePINCompleted(this, new GetSinglePINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetSinglePINSerial" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetSinglePINSerialResult")]
        public PIN[] GetSinglePINSerial(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int OrderID, int ProfileID, string TransactionMode, string TerminalSerialNumber) {
            object[] results = this.Invoke("GetSinglePINSerial", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TerminalSerialNumber});
            return ((PIN[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSinglePINSerialAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int OrderID, int ProfileID, string TransactionMode, string TerminalSerialNumber) {
            this.GetSinglePINSerialAsync(MID, TID, Password, Cashier, ProductMaincode, ProductDenomination, OrderID, ProfileID, TransactionMode, TerminalSerialNumber, null);
        }
        
        /// <remarks/>
        public void GetSinglePINSerialAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int OrderID, int ProfileID, string TransactionMode, string TerminalSerialNumber, object userState) {
            if ((this.GetSinglePINSerialOperationCompleted == null)) {
                this.GetSinglePINSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSinglePINSerialOperationCompleted);
            }
            this.InvokeAsync("GetSinglePINSerial", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TerminalSerialNumber}, this.GetSinglePINSerialOperationCompleted, userState);
        }
        
        private void OnGetSinglePINSerialOperationCompleted(object arg) {
            if ((this.GetSinglePINSerialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSinglePINSerialCompleted(this, new GetSinglePINSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetMultiplePIN", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetMultiplePINResult")]
        public PIN[] GetMultiplePIN(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int QtyPINs, int OrderID, int ProfileID, string TransactionMode) {
            object[] results = this.Invoke("GetMultiplePIN", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        QtyPINs,
                        OrderID,
                        ProfileID,
                        TransactionMode});
            return ((PIN[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMultiplePINAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int QtyPINs, int OrderID, int ProfileID, string TransactionMode) {
            this.GetMultiplePINAsync(MID, TID, Password, Cashier, ProductMaincode, ProductDenomination, QtyPINs, OrderID, ProfileID, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetMultiplePINAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int QtyPINs, int OrderID, int ProfileID, string TransactionMode, object userState) {
            if ((this.GetMultiplePINOperationCompleted == null)) {
                this.GetMultiplePINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultiplePINOperationCompleted);
            }
            this.InvokeAsync("GetMultiplePIN", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        QtyPINs,
                        OrderID,
                        ProfileID,
                        TransactionMode}, this.GetMultiplePINOperationCompleted, userState);
        }
        
        private void OnGetMultiplePINOperationCompleted(object arg) {
            if ((this.GetMultiplePINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultiplePINCompleted(this, new GetMultiplePINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetMultiplePINLite" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetMultiplePINLiteResult")]
        public PIN[] GetMultiplePINLite(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int QtyPINs, int OrderID, int ProfileID, string TransactionMode) {
            object[] results = this.Invoke("GetMultiplePINLite", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        QtyPINs,
                        OrderID,
                        ProfileID,
                        TransactionMode});
            return ((PIN[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMultiplePINLiteAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int QtyPINs, int OrderID, int ProfileID, string TransactionMode) {
            this.GetMultiplePINLiteAsync(MID, TID, Password, Cashier, ProductMaincode, ProductDenomination, QtyPINs, OrderID, ProfileID, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetMultiplePINLiteAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, decimal ProductDenomination, int QtyPINs, int OrderID, int ProfileID, string TransactionMode, object userState) {
            if ((this.GetMultiplePINLiteOperationCompleted == null)) {
                this.GetMultiplePINLiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultiplePINLiteOperationCompleted);
            }
            this.InvokeAsync("GetMultiplePINLite", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        ProductDenomination,
                        QtyPINs,
                        OrderID,
                        ProfileID,
                        TransactionMode}, this.GetMultiplePINLiteOperationCompleted, userState);
        }
        
        private void OnGetMultiplePINLiteOperationCompleted(object arg) {
            if ((this.GetMultiplePINLiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultiplePINLiteCompleted(this, new GetMultiplePINLiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/VoidOrder", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PIN VoidOrder(string MID, string TID, string Password, string Cashier, int OrderID, string TransactionMode) {
            object[] results = this.Invoke("VoidOrder", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        OrderID,
                        TransactionMode});
            return ((PIN)(results[0]));
        }
        
        /// <remarks/>
        public void VoidOrderAsync(string MID, string TID, string Password, string Cashier, int OrderID, string TransactionMode) {
            this.VoidOrderAsync(MID, TID, Password, Cashier, OrderID, TransactionMode, null);
        }
        
        /// <remarks/>
        public void VoidOrderAsync(string MID, string TID, string Password, string Cashier, int OrderID, string TransactionMode, object userState) {
            if ((this.VoidOrderOperationCompleted == null)) {
                this.VoidOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidOrderOperationCompleted);
            }
            this.InvokeAsync("VoidOrder", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        OrderID,
                        TransactionMode}, this.VoidOrderOperationCompleted, userState);
        }
        
        private void OnVoidOrderOperationCompleted(object arg) {
            if ((this.VoidOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidOrderCompleted(this, new VoidOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTopUp", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PIN DoTopUp(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode) {
            object[] results = this.Invoke("DoTopUp", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode});
            return ((PIN)(results[0]));
        }
        
        /// <remarks/>
        public void DoTopUpAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode) {
            this.DoTopUpAsync(MID, TID, Password, Cashier, ProductMaincode, TopUpAmount, PhoneNumber, CountryCode, OrderID, ProfileID, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoTopUpAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, object userState) {
            if ((this.DoTopUpOperationCompleted == null)) {
                this.DoTopUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTopUpOperationCompleted);
            }
            this.InvokeAsync("DoTopUp", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode}, this.DoTopUpOperationCompleted, userState);
        }
        
        private void OnDoTopUpOperationCompleted(object arg) {
            if ((this.DoTopUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTopUpCompleted(this, new DoTopUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTopUpWithAdditio" +
            "nalPhones", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PIN DoTopUpWithAdditionalPhones(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, AdditionalPhonesData AdditionalPhones) {
            object[] results = this.Invoke("DoTopUpWithAdditionalPhones", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        AdditionalPhones});
            return ((PIN)(results[0]));
        }
        
        /// <remarks/>
        public void DoTopUpWithAdditionalPhonesAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, AdditionalPhonesData AdditionalPhones) {
            this.DoTopUpWithAdditionalPhonesAsync(MID, TID, Password, Cashier, ProductMaincode, TopUpAmount, PhoneNumber, CountryCode, OrderID, ProfileID, TransactionMode, AdditionalPhones, null);
        }
        
        /// <remarks/>
        public void DoTopUpWithAdditionalPhonesAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, AdditionalPhonesData AdditionalPhones, object userState) {
            if ((this.DoTopUpWithAdditionalPhonesOperationCompleted == null)) {
                this.DoTopUpWithAdditionalPhonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTopUpWithAdditionalPhonesOperationCompleted);
            }
            this.InvokeAsync("DoTopUpWithAdditionalPhones", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        AdditionalPhones}, this.DoTopUpWithAdditionalPhonesOperationCompleted, userState);
        }
        
        private void OnDoTopUpWithAdditionalPhonesOperationCompleted(object arg) {
            if ((this.DoTopUpWithAdditionalPhonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTopUpWithAdditionalPhonesCompleted(this, new DoTopUpWithAdditionalPhonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTopUpFee", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PIN DoTopUpFee(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee) {
            object[] results = this.Invoke("DoTopUpFee", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee});
            return ((PIN)(results[0]));
        }
        
        /// <remarks/>
        public void DoTopUpFeeAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee) {
            this.DoTopUpFeeAsync(MID, TID, Password, Cashier, ProductMaincode, TopUpAmount, PhoneNumber, CountryCode, OrderID, ProfileID, TransactionMode, TransactionFee, null);
        }
        
        /// <remarks/>
        public void DoTopUpFeeAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, object userState) {
            if ((this.DoTopUpFeeOperationCompleted == null)) {
                this.DoTopUpFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTopUpFeeOperationCompleted);
            }
            this.InvokeAsync("DoTopUpFee", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee}, this.DoTopUpFeeOperationCompleted, userState);
        }
        
        private void OnDoTopUpFeeOperationCompleted(object arg) {
            if ((this.DoTopUpFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTopUpFeeCompleted(this, new DoTopUpFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTopUpFeeWithAddi" +
            "tionalPhones", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PIN DoTopUpFeeWithAdditionalPhones(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, AdditionalPhonesData AdditionalPhones) {
            object[] results = this.Invoke("DoTopUpFeeWithAdditionalPhones", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee,
                        AdditionalPhones});
            return ((PIN)(results[0]));
        }
        
        /// <remarks/>
        public void DoTopUpFeeWithAdditionalPhonesAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, AdditionalPhonesData AdditionalPhones) {
            this.DoTopUpFeeWithAdditionalPhonesAsync(MID, TID, Password, Cashier, ProductMaincode, TopUpAmount, PhoneNumber, CountryCode, OrderID, ProfileID, TransactionMode, TransactionFee, AdditionalPhones, null);
        }
        
        /// <remarks/>
        public void DoTopUpFeeWithAdditionalPhonesAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, AdditionalPhonesData AdditionalPhones, object userState) {
            if ((this.DoTopUpFeeWithAdditionalPhonesOperationCompleted == null)) {
                this.DoTopUpFeeWithAdditionalPhonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTopUpFeeWithAdditionalPhonesOperationCompleted);
            }
            this.InvokeAsync("DoTopUpFeeWithAdditionalPhones", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee,
                        AdditionalPhones}, this.DoTopUpFeeWithAdditionalPhonesOperationCompleted, userState);
        }
        
        private void OnDoTopUpFeeWithAdditionalPhonesOperationCompleted(object arg) {
            if ((this.DoTopUpFeeWithAdditionalPhonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTopUpFeeWithAdditionalPhonesCompleted(this, new DoTopUpFeeWithAdditionalPhonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTopUpFeeSerial", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PIN DoTopUpFeeSerial(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, string TerminalSerialNumber) {
            object[] results = this.Invoke("DoTopUpFeeSerial", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee,
                        TerminalSerialNumber});
            return ((PIN)(results[0]));
        }
        
        /// <remarks/>
        public void DoTopUpFeeSerialAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, string TerminalSerialNumber) {
            this.DoTopUpFeeSerialAsync(MID, TID, Password, Cashier, ProductMaincode, TopUpAmount, PhoneNumber, CountryCode, OrderID, ProfileID, TransactionMode, TransactionFee, TerminalSerialNumber, null);
        }
        
        /// <remarks/>
        public void DoTopUpFeeSerialAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, string TerminalSerialNumber, object userState) {
            if ((this.DoTopUpFeeSerialOperationCompleted == null)) {
                this.DoTopUpFeeSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTopUpFeeSerialOperationCompleted);
            }
            this.InvokeAsync("DoTopUpFeeSerial", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee,
                        TerminalSerialNumber}, this.DoTopUpFeeSerialOperationCompleted, userState);
        }
        
        private void OnDoTopUpFeeSerialOperationCompleted(object arg) {
            if ((this.DoTopUpFeeSerialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTopUpFeeSerialCompleted(this, new DoTopUpFeeSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTopUpFeeSerialWi" +
            "thAdditionalPhones", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PIN DoTopUpFeeSerialWithAdditionalPhones(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, string TerminalSerialNumber, AdditionalPhonesData AdditionalPhones) {
            object[] results = this.Invoke("DoTopUpFeeSerialWithAdditionalPhones", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee,
                        TerminalSerialNumber,
                        AdditionalPhones});
            return ((PIN)(results[0]));
        }
        
        /// <remarks/>
        public void DoTopUpFeeSerialWithAdditionalPhonesAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, string TerminalSerialNumber, AdditionalPhonesData AdditionalPhones) {
            this.DoTopUpFeeSerialWithAdditionalPhonesAsync(MID, TID, Password, Cashier, ProductMaincode, TopUpAmount, PhoneNumber, CountryCode, OrderID, ProfileID, TransactionMode, TransactionFee, TerminalSerialNumber, AdditionalPhones, null);
        }
        
        /// <remarks/>
        public void DoTopUpFeeSerialWithAdditionalPhonesAsync(string MID, string TID, string Password, string Cashier, string ProductMaincode, string TopUpAmount, string PhoneNumber, string CountryCode, int OrderID, int ProfileID, string TransactionMode, double TransactionFee, string TerminalSerialNumber, AdditionalPhonesData AdditionalPhones, object userState) {
            if ((this.DoTopUpFeeSerialWithAdditionalPhonesOperationCompleted == null)) {
                this.DoTopUpFeeSerialWithAdditionalPhonesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTopUpFeeSerialWithAdditionalPhonesOperationCompleted);
            }
            this.InvokeAsync("DoTopUpFeeSerialWithAdditionalPhones", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProductMaincode,
                        TopUpAmount,
                        PhoneNumber,
                        CountryCode,
                        OrderID,
                        ProfileID,
                        TransactionMode,
                        TransactionFee,
                        TerminalSerialNumber,
                        AdditionalPhones}, this.DoTopUpFeeSerialWithAdditionalPhonesOperationCompleted, userState);
        }
        
        private void OnDoTopUpFeeSerialWithAdditionalPhonesOperationCompleted(object arg) {
            if ((this.DoTopUpFeeSerialWithAdditionalPhonesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTopUpFeeSerialWithAdditionalPhonesCompleted(this, new DoTopUpFeeSerialWithAdditionalPhonesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoDailyReconciliat" +
            "ion", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BillPaymentReconciliationResponse DoDailyReconciliation(string MID, string TID, string Password, string Cashier, System.DateTime batchDate, bool detailedResponse, long transactionId, string TransactionMode) {
            object[] results = this.Invoke("DoDailyReconciliation", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        batchDate,
                        detailedResponse,
                        transactionId,
                        TransactionMode});
            return ((BillPaymentReconciliationResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoDailyReconciliationAsync(string MID, string TID, string Password, string Cashier, System.DateTime batchDate, bool detailedResponse, long transactionId, string TransactionMode) {
            this.DoDailyReconciliationAsync(MID, TID, Password, Cashier, batchDate, detailedResponse, transactionId, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoDailyReconciliationAsync(string MID, string TID, string Password, string Cashier, System.DateTime batchDate, bool detailedResponse, long transactionId, string TransactionMode, object userState) {
            if ((this.DoDailyReconciliationOperationCompleted == null)) {
                this.DoDailyReconciliationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoDailyReconciliationOperationCompleted);
            }
            this.InvokeAsync("DoDailyReconciliation", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        batchDate,
                        detailedResponse,
                        transactionId,
                        TransactionMode}, this.DoDailyReconciliationOperationCompleted, userState);
        }
        
        private void OnDoDailyReconciliationOperationCompleted(object arg) {
            if ((this.DoDailyReconciliationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoDailyReconciliationCompleted(this, new DoDailyReconciliationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoBillPresentment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BillPaymentResponse DoBillPresentment(
                    string MID, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    long transactionId, 
                    string TransactionMode) {
            object[] results = this.Invoke("DoBillPresentment", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        transactionId,
                        TransactionMode});
            return ((BillPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoBillPresentmentAsync(
                    string MID, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    long transactionId, 
                    string TransactionMode) {
            this.DoBillPresentmentAsync(MID, TID, Password, Cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoBillPresentmentAsync(
                    string MID, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    long transactionId, 
                    string TransactionMode, 
                    object userState) {
            if ((this.DoBillPresentmentOperationCompleted == null)) {
                this.DoBillPresentmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoBillPresentmentOperationCompleted);
            }
            this.InvokeAsync("DoBillPresentment", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        transactionId,
                        TransactionMode}, this.DoBillPresentmentOperationCompleted, userState);
        }
        
        private void OnDoBillPresentmentOperationCompleted(object arg) {
            if ((this.DoBillPresentmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoBillPresentmentCompleted(this, new DoBillPresentmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoBillPayment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BillPaymentResponse DoBillPayment(
                    string MID, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    long transactionId, 
                    string TransactionMode) {
            object[] results = this.Invoke("DoBillPayment", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        transactionId,
                        TransactionMode});
            return ((BillPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoBillPaymentAsync(
                    string MID, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    long transactionId, 
                    string TransactionMode) {
            this.DoBillPaymentAsync(MID, TID, Password, Cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, transactionId, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoBillPaymentAsync(
                    string MID, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    long transactionId, 
                    string TransactionMode, 
                    object userState) {
            if ((this.DoBillPaymentOperationCompleted == null)) {
                this.DoBillPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoBillPaymentOperationCompleted);
            }
            this.InvokeAsync("DoBillPayment", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        transactionId,
                        TransactionMode}, this.DoBillPaymentOperationCompleted, userState);
        }
        
        private void OnDoBillPaymentOperationCompleted(object arg) {
            if ((this.DoBillPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoBillPaymentCompleted(this, new DoBillPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetBillerCategorie" +
            "s", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BillerCategoriesResponse GetBillerCategories(string MID, string TID, string Password, string Cashier, long transactionId, string TransactionMode) {
            object[] results = this.Invoke("GetBillerCategories", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        transactionId,
                        TransactionMode});
            return ((BillerCategoriesResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetBillerCategoriesAsync(string MID, string TID, string Password, string Cashier, long transactionId, string TransactionMode) {
            this.GetBillerCategoriesAsync(MID, TID, Password, Cashier, transactionId, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetBillerCategoriesAsync(string MID, string TID, string Password, string Cashier, long transactionId, string TransactionMode, object userState) {
            if ((this.GetBillerCategoriesOperationCompleted == null)) {
                this.GetBillerCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillerCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetBillerCategories", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        transactionId,
                        TransactionMode}, this.GetBillerCategoriesOperationCompleted, userState);
        }
        
        private void OnGetBillerCategoriesOperationCompleted(object arg) {
            if ((this.GetBillerCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillerCategoriesCompleted(this, new GetBillerCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetMasterBillersBy" +
            "Category", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MasterBillersByCategoryResponse GetMasterBillersByCategory(string MID, string TID, string Password, string Cashier, string CategoryId, long transactionId, string TransactionMode) {
            object[] results = this.Invoke("GetMasterBillersByCategory", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        CategoryId,
                        transactionId,
                        TransactionMode});
            return ((MasterBillersByCategoryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterBillersByCategoryAsync(string MID, string TID, string Password, string Cashier, string CategoryId, long transactionId, string TransactionMode) {
            this.GetMasterBillersByCategoryAsync(MID, TID, Password, Cashier, CategoryId, transactionId, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetMasterBillersByCategoryAsync(string MID, string TID, string Password, string Cashier, string CategoryId, long transactionId, string TransactionMode, object userState) {
            if ((this.GetMasterBillersByCategoryOperationCompleted == null)) {
                this.GetMasterBillersByCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterBillersByCategoryOperationCompleted);
            }
            this.InvokeAsync("GetMasterBillersByCategory", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        CategoryId,
                        transactionId,
                        TransactionMode}, this.GetMasterBillersByCategoryOperationCompleted, userState);
        }
        
        private void OnGetMasterBillersByCategoryOperationCompleted(object arg) {
            if ((this.GetMasterBillersByCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterBillersByCategoryCompleted(this, new GetMasterBillersByCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetMasterBillerPay" +
            "mentOptions", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MasterBillerPaymentOptionsResponse GetMasterBillerPaymentOptions(string MID, string TID, string Password, string Cashier, string MasterBillerId, long transactionId, string TransactionMode) {
            object[] results = this.Invoke("GetMasterBillerPaymentOptions", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        MasterBillerId,
                        transactionId,
                        TransactionMode});
            return ((MasterBillerPaymentOptionsResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterBillerPaymentOptionsAsync(string MID, string TID, string Password, string Cashier, string MasterBillerId, long transactionId, string TransactionMode) {
            this.GetMasterBillerPaymentOptionsAsync(MID, TID, Password, Cashier, MasterBillerId, transactionId, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetMasterBillerPaymentOptionsAsync(string MID, string TID, string Password, string Cashier, string MasterBillerId, long transactionId, string TransactionMode, object userState) {
            if ((this.GetMasterBillerPaymentOptionsOperationCompleted == null)) {
                this.GetMasterBillerPaymentOptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterBillerPaymentOptionsOperationCompleted);
            }
            this.InvokeAsync("GetMasterBillerPaymentOptions", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        MasterBillerId,
                        transactionId,
                        TransactionMode}, this.GetMasterBillerPaymentOptionsOperationCompleted, userState);
        }
        
        private void OnGetMasterBillerPaymentOptionsOperationCompleted(object arg) {
            if ((this.GetMasterBillerPaymentOptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterBillerPaymentOptionsCompleted(this, new GetMasterBillerPaymentOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetBillersCategori" +
            "esOld", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Category[] GetBillersCategoriesOld(int MerchantId, string TID, string Password, string Cashier) {
            object[] results = this.Invoke("GetBillersCategoriesOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier});
            return ((Category[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBillersCategoriesOldAsync(int MerchantId, string TID, string Password, string Cashier) {
            this.GetBillersCategoriesOldAsync(MerchantId, TID, Password, Cashier, null);
        }
        
        /// <remarks/>
        public void GetBillersCategoriesOldAsync(int MerchantId, string TID, string Password, string Cashier, object userState) {
            if ((this.GetBillersCategoriesOldOperationCompleted == null)) {
                this.GetBillersCategoriesOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillersCategoriesOldOperationCompleted);
            }
            this.InvokeAsync("GetBillersCategoriesOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier}, this.GetBillersCategoriesOldOperationCompleted, userState);
        }
        
        private void OnGetBillersCategoriesOldOperationCompleted(object arg) {
            if ((this.GetBillersCategoriesOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillersCategoriesOldCompleted(this, new GetBillersCategoriesOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetMasterBillersBy" +
            "CategoryOld", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MasterBiller[] GetMasterBillersByCategoryOld(int MerchantId, string TID, string Password, string Cashier, string CategoryId) {
            object[] results = this.Invoke("GetMasterBillersByCategoryOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        CategoryId});
            return ((MasterBiller[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterBillersByCategoryOldAsync(int MerchantId, string TID, string Password, string Cashier, string CategoryId) {
            this.GetMasterBillersByCategoryOldAsync(MerchantId, TID, Password, Cashier, CategoryId, null);
        }
        
        /// <remarks/>
        public void GetMasterBillersByCategoryOldAsync(int MerchantId, string TID, string Password, string Cashier, string CategoryId, object userState) {
            if ((this.GetMasterBillersByCategoryOldOperationCompleted == null)) {
                this.GetMasterBillersByCategoryOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterBillersByCategoryOldOperationCompleted);
            }
            this.InvokeAsync("GetMasterBillersByCategoryOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        CategoryId}, this.GetMasterBillersByCategoryOldOperationCompleted, userState);
        }
        
        private void OnGetMasterBillersByCategoryOldOperationCompleted(object arg) {
            if ((this.GetMasterBillersByCategoryOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterBillersByCategoryOldCompleted(this, new GetMasterBillersByCategoryOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetMasterBillerPay" +
            "mentOptionsOld", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PaymentOptionOld[] GetMasterBillerPaymentOptionsOld(int MerchantId, string TID, string Password, string Cashier, string MasterBillerId) {
            object[] results = this.Invoke("GetMasterBillerPaymentOptionsOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        MasterBillerId});
            return ((PaymentOptionOld[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterBillerPaymentOptionsOldAsync(int MerchantId, string TID, string Password, string Cashier, string MasterBillerId) {
            this.GetMasterBillerPaymentOptionsOldAsync(MerchantId, TID, Password, Cashier, MasterBillerId, null);
        }
        
        /// <remarks/>
        public void GetMasterBillerPaymentOptionsOldAsync(int MerchantId, string TID, string Password, string Cashier, string MasterBillerId, object userState) {
            if ((this.GetMasterBillerPaymentOptionsOldOperationCompleted == null)) {
                this.GetMasterBillerPaymentOptionsOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterBillerPaymentOptionsOldOperationCompleted);
            }
            this.InvokeAsync("GetMasterBillerPaymentOptionsOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        MasterBillerId}, this.GetMasterBillerPaymentOptionsOldOperationCompleted, userState);
        }
        
        private void OnGetMasterBillerPaymentOptionsOldOperationCompleted(object arg) {
            if ((this.GetMasterBillerPaymentOptionsOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterBillerPaymentOptionsOldCompleted(this, new GetMasterBillerPaymentOptionsOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetSunPassBalance", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BalanceResponse GetSunPassBalance(int merchantId, string TID, string password, string cashier, string accountNumber, string transactionMode) {
            object[] results = this.Invoke("GetSunPassBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        transactionMode});
            return ((BalanceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetSunPassBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string transactionMode) {
            this.GetSunPassBalanceAsync(merchantId, TID, password, cashier, accountNumber, transactionMode, null);
        }
        
        /// <remarks/>
        public void GetSunPassBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string transactionMode, object userState) {
            if ((this.GetSunPassBalanceOperationCompleted == null)) {
                this.GetSunPassBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSunPassBalanceOperationCompleted);
            }
            this.InvokeAsync("GetSunPassBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        transactionMode}, this.GetSunPassBalanceOperationCompleted, userState);
        }
        
        private void OnGetSunPassBalanceOperationCompleted(object arg) {
            if ((this.GetSunPassBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSunPassBalanceCompleted(this, new GetSunPassBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoSunPassReplenish" +
            "ment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReplenishmentResponse DoSunPassReplenishment(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string transactionMode) {
            object[] results = this.Invoke("DoSunPassReplenishment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        transactionMode});
            return ((ReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoSunPassReplenishmentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string transactionMode) {
            this.DoSunPassReplenishmentAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoSunPassReplenishmentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string transactionMode, object userState) {
            if ((this.DoSunPassReplenishmentOperationCompleted == null)) {
                this.DoSunPassReplenishmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSunPassReplenishmentOperationCompleted);
            }
            this.InvokeAsync("DoSunPassReplenishment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        transactionMode}, this.DoSunPassReplenishmentOperationCompleted, userState);
        }
        
        private void OnDoSunPassReplenishmentOperationCompleted(object arg) {
            if ((this.DoSunPassReplenishmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSunPassReplenishmentCompleted(this, new DoSunPassReplenishmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoSunPassReplenish" +
            "mentByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReplenishmentResponse DoSunPassReplenishmentByStore(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string storeId, string transactionMode) {
            object[] results = this.Invoke("DoSunPassReplenishmentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        transactionMode});
            return ((ReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoSunPassReplenishmentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string storeId, string transactionMode) {
            this.DoSunPassReplenishmentByStoreAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, storeId, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoSunPassReplenishmentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string storeId, string transactionMode, object userState) {
            if ((this.DoSunPassReplenishmentByStoreOperationCompleted == null)) {
                this.DoSunPassReplenishmentByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSunPassReplenishmentByStoreOperationCompleted);
            }
            this.InvokeAsync("DoSunPassReplenishmentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        transactionMode}, this.DoSunPassReplenishmentByStoreOperationCompleted, userState);
        }
        
        private void OnDoSunPassReplenishmentByStoreOperationCompleted(object arg) {
            if ((this.DoSunPassReplenishmentByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSunPassReplenishmentByStoreCompleted(this, new DoSunPassReplenishmentByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoSunPassDocumentI" +
            "nquiry", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentInquiryResponse DoSunPassDocumentInquiry(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, string transactionMode) {
            object[] results = this.Invoke("DoSunPassDocumentInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        transactionMode});
            return ((DocumentInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoSunPassDocumentInquiryAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, string transactionMode) {
            this.DoSunPassDocumentInquiryAsync(merchantId, TID, password, cashier, accountNumber, licensePlateNumber, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoSunPassDocumentInquiryAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, string transactionMode, object userState) {
            if ((this.DoSunPassDocumentInquiryOperationCompleted == null)) {
                this.DoSunPassDocumentInquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSunPassDocumentInquiryOperationCompleted);
            }
            this.InvokeAsync("DoSunPassDocumentInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        transactionMode}, this.DoSunPassDocumentInquiryOperationCompleted, userState);
        }
        
        private void OnDoSunPassDocumentInquiryOperationCompleted(object arg) {
            if ((this.DoSunPassDocumentInquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSunPassDocumentInquiryCompleted(this, new DoSunPassDocumentInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoSunPassDocumentI" +
            "nquiryByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentInquiryResponse DoSunPassDocumentInquiryByStore(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, string storeId, string zipCode, string transactionMode) {
            object[] results = this.Invoke("DoSunPassDocumentInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        storeId,
                        zipCode,
                        transactionMode});
            return ((DocumentInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoSunPassDocumentInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, string storeId, string zipCode, string transactionMode) {
            this.DoSunPassDocumentInquiryByStoreAsync(merchantId, TID, password, cashier, accountNumber, licensePlateNumber, storeId, zipCode, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoSunPassDocumentInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, string storeId, string zipCode, string transactionMode, object userState) {
            if ((this.DoSunPassDocumentInquiryByStoreOperationCompleted == null)) {
                this.DoSunPassDocumentInquiryByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSunPassDocumentInquiryByStoreOperationCompleted);
            }
            this.InvokeAsync("DoSunPassDocumentInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        storeId,
                        zipCode,
                        transactionMode}, this.DoSunPassDocumentInquiryByStoreOperationCompleted, userState);
        }
        
        private void OnDoSunPassDocumentInquiryByStoreOperationCompleted(object arg) {
            if ((this.DoSunPassDocumentInquiryByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSunPassDocumentInquiryByStoreCompleted(this, new DoSunPassDocumentInquiryByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoSunPassDocumentP" +
            "ayment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentPaymentResponse DoSunPassDocumentPayment(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, string licensePlateNumber, double amount, double feeAmount, string purchaseId, Document[] paidDocuments, string transactionMode) {
            object[] results = this.Invoke("DoSunPassDocumentPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        licensePlateNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        transactionMode});
            return ((DocumentPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoSunPassDocumentPaymentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, string licensePlateNumber, double amount, double feeAmount, string purchaseId, Document[] paidDocuments, string transactionMode) {
            this.DoSunPassDocumentPaymentAsync(merchantId, TID, password, cashier, transactionId, accountNumber, licensePlateNumber, amount, feeAmount, purchaseId, paidDocuments, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoSunPassDocumentPaymentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, string licensePlateNumber, double amount, double feeAmount, string purchaseId, Document[] paidDocuments, string transactionMode, object userState) {
            if ((this.DoSunPassDocumentPaymentOperationCompleted == null)) {
                this.DoSunPassDocumentPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSunPassDocumentPaymentOperationCompleted);
            }
            this.InvokeAsync("DoSunPassDocumentPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        licensePlateNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        transactionMode}, this.DoSunPassDocumentPaymentOperationCompleted, userState);
        }
        
        private void OnDoSunPassDocumentPaymentOperationCompleted(object arg) {
            if ((this.DoSunPassDocumentPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSunPassDocumentPaymentCompleted(this, new DoSunPassDocumentPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoSunPassDocumentP" +
            "aymentByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentPaymentResponse DoSunPassDocumentPaymentByStore(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, string licensePlateNumber, double amount, double feeAmount, string purchaseId, Document[] paidDocuments, string storeId, string transactionMode) {
            object[] results = this.Invoke("DoSunPassDocumentPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        licensePlateNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        storeId,
                        transactionMode});
            return ((DocumentPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoSunPassDocumentPaymentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, string licensePlateNumber, double amount, double feeAmount, string purchaseId, Document[] paidDocuments, string storeId, string transactionMode) {
            this.DoSunPassDocumentPaymentByStoreAsync(merchantId, TID, password, cashier, transactionId, accountNumber, licensePlateNumber, amount, feeAmount, purchaseId, paidDocuments, storeId, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoSunPassDocumentPaymentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, string licensePlateNumber, double amount, double feeAmount, string purchaseId, Document[] paidDocuments, string storeId, string transactionMode, object userState) {
            if ((this.DoSunPassDocumentPaymentByStoreOperationCompleted == null)) {
                this.DoSunPassDocumentPaymentByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoSunPassDocumentPaymentByStoreOperationCompleted);
            }
            this.InvokeAsync("DoSunPassDocumentPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        licensePlateNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        storeId,
                        transactionMode}, this.DoSunPassDocumentPaymentByStoreOperationCompleted, userState);
        }
        
        private void OnDoSunPassDocumentPaymentByStoreOperationCompleted(object arg) {
            if ((this.DoSunPassDocumentPaymentByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoSunPassDocumentPaymentByStoreCompleted(this, new DoSunPassDocumentPaymentByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductList", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductListResponse GetProductList(string MID, string TID, string Password, string cashier, long TransactionId) {
            object[] results = this.Invoke("GetProductList", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId});
            return ((ProductListResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListAsync(string MID, string TID, string Password, string cashier, long TransactionId) {
            this.GetProductListAsync(MID, TID, Password, cashier, TransactionId, null);
        }
        
        /// <remarks/>
        public void GetProductListAsync(string MID, string TID, string Password, string cashier, long TransactionId, object userState) {
            if ((this.GetProductListOperationCompleted == null)) {
                this.GetProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListOperationCompleted);
            }
            this.InvokeAsync("GetProductList", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId}, this.GetProductListOperationCompleted, userState);
        }
        
        private void OnGetProductListOperationCompleted(object arg) {
            if ((this.GetProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListCompleted(this, new GetProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductListByPr" +
            "oductSbt", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductListResponse GetProductListByProductSbt(string MID, string TID, string Password, string cashier, long TransactionId, string ProductSbt) {
            object[] results = this.Invoke("GetProductListByProductSbt", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId,
                        ProductSbt});
            return ((ProductListResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListByProductSbtAsync(string MID, string TID, string Password, string cashier, long TransactionId, string ProductSbt) {
            this.GetProductListByProductSbtAsync(MID, TID, Password, cashier, TransactionId, ProductSbt, null);
        }
        
        /// <remarks/>
        public void GetProductListByProductSbtAsync(string MID, string TID, string Password, string cashier, long TransactionId, string ProductSbt, object userState) {
            if ((this.GetProductListByProductSbtOperationCompleted == null)) {
                this.GetProductListByProductSbtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListByProductSbtOperationCompleted);
            }
            this.InvokeAsync("GetProductListByProductSbt", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId,
                        ProductSbt}, this.GetProductListByProductSbtOperationCompleted, userState);
        }
        
        private void OnGetProductListByProductSbtOperationCompleted(object arg) {
            if ((this.GetProductListByProductSbtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListByProductSbtCompleted(this, new GetProductListByProductSbtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductListByPr" +
            "oductMainCode", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductListResponse GetProductListByProductMainCode(string MID, string TID, string Password, string cashier, long TransactionId, string ProductMainCode) {
            object[] results = this.Invoke("GetProductListByProductMainCode", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId,
                        ProductMainCode});
            return ((ProductListResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListByProductMainCodeAsync(string MID, string TID, string Password, string cashier, long TransactionId, string ProductMainCode) {
            this.GetProductListByProductMainCodeAsync(MID, TID, Password, cashier, TransactionId, ProductMainCode, null);
        }
        
        /// <remarks/>
        public void GetProductListByProductMainCodeAsync(string MID, string TID, string Password, string cashier, long TransactionId, string ProductMainCode, object userState) {
            if ((this.GetProductListByProductMainCodeOperationCompleted == null)) {
                this.GetProductListByProductMainCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListByProductMainCodeOperationCompleted);
            }
            this.InvokeAsync("GetProductListByProductMainCode", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId,
                        ProductMainCode}, this.GetProductListByProductMainCodeOperationCompleted, userState);
        }
        
        private void OnGetProductListByProductMainCodeOperationCompleted(object arg) {
            if ((this.GetProductListByProductMainCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListByProductMainCodeCompleted(this, new GetProductListByProductMainCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductListVers" +
            "ionNumber", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductListVersionResponse GetProductListVersionNumber(string MID, string TID, string Password, string cashier, long TransactionId) {
            object[] results = this.Invoke("GetProductListVersionNumber", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId});
            return ((ProductListVersionResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductListVersionNumberAsync(string MID, string TID, string Password, string cashier, long TransactionId) {
            this.GetProductListVersionNumberAsync(MID, TID, Password, cashier, TransactionId, null);
        }
        
        /// <remarks/>
        public void GetProductListVersionNumberAsync(string MID, string TID, string Password, string cashier, long TransactionId, object userState) {
            if ((this.GetProductListVersionNumberOperationCompleted == null)) {
                this.GetProductListVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductListVersionNumberOperationCompleted);
            }
            this.InvokeAsync("GetProductListVersionNumber", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        TransactionId}, this.GetProductListVersionNumberOperationCompleted, userState);
        }
        
        private void OnGetProductListVersionNumberOperationCompleted(object arg) {
            if ((this.GetProductListVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductListVersionNumberCompleted(this, new GetProductListVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductRates", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductRatesResponse GetProductRates(string MID, string TID, string Password, string cashier, string ProductMainCode, long TransactionId) {
            object[] results = this.Invoke("GetProductRates", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        ProductMainCode,
                        TransactionId});
            return ((ProductRatesResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductRatesAsync(string MID, string TID, string Password, string cashier, string ProductMainCode, long TransactionId) {
            this.GetProductRatesAsync(MID, TID, Password, cashier, ProductMainCode, TransactionId, null);
        }
        
        /// <remarks/>
        public void GetProductRatesAsync(string MID, string TID, string Password, string cashier, string ProductMainCode, long TransactionId, object userState) {
            if ((this.GetProductRatesOperationCompleted == null)) {
                this.GetProductRatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductRatesOperationCompleted);
            }
            this.InvokeAsync("GetProductRates", new object[] {
                        MID,
                        TID,
                        Password,
                        cashier,
                        ProductMainCode,
                        TransactionId}, this.GetProductRatesOperationCompleted, userState);
        }
        
        private void OnGetProductRatesOperationCompleted(object arg) {
            if ((this.GetProductRatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductRatesCompleted(this, new GetProductRatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductLocalPho" +
            "nesByMerchantId", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProductLocalPhonesResponse GetProductLocalPhonesByMerchantId(string MID, string TID, string Password, string ProductMaincode) {
            object[] results = this.Invoke("GetProductLocalPhonesByMerchantId", new object[] {
                        MID,
                        TID,
                        Password,
                        ProductMaincode});
            return ((ProductLocalPhonesResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductLocalPhonesByMerchantIdAsync(string MID, string TID, string Password, string ProductMaincode) {
            this.GetProductLocalPhonesByMerchantIdAsync(MID, TID, Password, ProductMaincode, null);
        }
        
        /// <remarks/>
        public void GetProductLocalPhonesByMerchantIdAsync(string MID, string TID, string Password, string ProductMaincode, object userState) {
            if ((this.GetProductLocalPhonesByMerchantIdOperationCompleted == null)) {
                this.GetProductLocalPhonesByMerchantIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductLocalPhonesByMerchantIdOperationCompleted);
            }
            this.InvokeAsync("GetProductLocalPhonesByMerchantId", new object[] {
                        MID,
                        TID,
                        Password,
                        ProductMaincode}, this.GetProductLocalPhonesByMerchantIdOperationCompleted, userState);
        }
        
        private void OnGetProductLocalPhonesByMerchantIdOperationCompleted(object arg) {
            if ((this.GetProductLocalPhonesByMerchantIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductLocalPhonesByMerchantIdCompleted(this, new GetProductLocalPhonesByMerchantIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoBillPaymentOld", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PaymentResponse DoBillPaymentOld(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    int orderId, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string remitTiming, 
                    string bypassType, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode) {
            object[] results = this.Invoke("DoBillPaymentOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        orderId,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        remitTiming,
                        bypassType,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode});
            return ((PaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoBillPaymentOldAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    int orderId, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string remitTiming, 
                    string bypassType, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode) {
            this.DoBillPaymentOldAsync(MerchantId, TID, Password, Cashier, orderId, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, remitTiming, bypassType, paymentType, senderFirstName, senderLastName, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoBillPaymentOldAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    int orderId, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string remitTiming, 
                    string bypassType, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    object userState) {
            if ((this.DoBillPaymentOldOperationCompleted == null)) {
                this.DoBillPaymentOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoBillPaymentOldOperationCompleted);
            }
            this.InvokeAsync("DoBillPaymentOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        orderId,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        remitTiming,
                        bypassType,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode}, this.DoBillPaymentOldOperationCompleted, userState);
        }
        
        private void OnDoBillPaymentOldOperationCompleted(object arg) {
            if ((this.DoBillPaymentOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoBillPaymentOldCompleted(this, new DoBillPaymentOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoBillPaymentOldSe" +
            "rial", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PaymentResponse DoBillPaymentOldSerial(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    int orderId, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string remitTiming, 
                    string bypassType, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    string TerminalSerialNumber) {
            object[] results = this.Invoke("DoBillPaymentOldSerial", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        orderId,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        remitTiming,
                        bypassType,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode,
                        TerminalSerialNumber});
            return ((PaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoBillPaymentOldSerialAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    int orderId, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string remitTiming, 
                    string bypassType, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    string TerminalSerialNumber) {
            this.DoBillPaymentOldSerialAsync(MerchantId, TID, Password, Cashier, orderId, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, remitTiming, bypassType, paymentType, senderFirstName, senderLastName, TransactionMode, TerminalSerialNumber, null);
        }
        
        /// <remarks/>
        public void DoBillPaymentOldSerialAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    int orderId, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string remitTiming, 
                    string bypassType, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    string TerminalSerialNumber, 
                    object userState) {
            if ((this.DoBillPaymentOldSerialOperationCompleted == null)) {
                this.DoBillPaymentOldSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoBillPaymentOldSerialOperationCompleted);
            }
            this.InvokeAsync("DoBillPaymentOldSerial", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        orderId,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        remitTiming,
                        bypassType,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode,
                        TerminalSerialNumber}, this.DoBillPaymentOldSerialOperationCompleted, userState);
        }
        
        private void OnDoBillPaymentOldSerialOperationCompleted(object arg) {
            if ((this.DoBillPaymentOldSerialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoBillPaymentOldSerialCompleted(this, new DoBillPaymentOldSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoBillPresentmentO" +
            "ld", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PaymentResponse DoBillPresentmentOld(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode) {
            object[] results = this.Invoke("DoBillPresentmentOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode});
            return ((PaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoBillPresentmentOldAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode) {
            this.DoBillPresentmentOldAsync(MerchantId, TID, Password, Cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoBillPresentmentOldAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    object userState) {
            if ((this.DoBillPresentmentOldOperationCompleted == null)) {
                this.DoBillPresentmentOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoBillPresentmentOldOperationCompleted);
            }
            this.InvokeAsync("DoBillPresentmentOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode}, this.DoBillPresentmentOldOperationCompleted, userState);
        }
        
        private void OnDoBillPresentmentOldOperationCompleted(object arg) {
            if ((this.DoBillPresentmentOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoBillPresentmentOldCompleted(this, new DoBillPresentmentOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoBillPresentmentO" +
            "ldSerial", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PaymentResponse DoBillPresentmentOldSerial(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    string TerminalSerialNumber) {
            object[] results = this.Invoke("DoBillPresentmentOldSerial", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode,
                        TerminalSerialNumber});
            return ((PaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoBillPresentmentOldSerialAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    string TerminalSerialNumber) {
            this.DoBillPresentmentOldSerialAsync(MerchantId, TID, Password, Cashier, vendorId, accountNumber, altAccountNumber, additAccountNumber1, additAccountNumber2, paymentAmount, feeAmount, customerFirstName, customerLastName, paymentType, senderFirstName, senderLastName, TransactionMode, TerminalSerialNumber, null);
        }
        
        /// <remarks/>
        public void DoBillPresentmentOldSerialAsync(
                    int MerchantId, 
                    string TID, 
                    string Password, 
                    string Cashier, 
                    string vendorId, 
                    string accountNumber, 
                    string altAccountNumber, 
                    string additAccountNumber1, 
                    string additAccountNumber2, 
                    double paymentAmount, 
                    double feeAmount, 
                    string customerFirstName, 
                    string customerLastName, 
                    string paymentType, 
                    string senderFirstName, 
                    string senderLastName, 
                    string TransactionMode, 
                    string TerminalSerialNumber, 
                    object userState) {
            if ((this.DoBillPresentmentOldSerialOperationCompleted == null)) {
                this.DoBillPresentmentOldSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoBillPresentmentOldSerialOperationCompleted);
            }
            this.InvokeAsync("DoBillPresentmentOldSerial", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        vendorId,
                        accountNumber,
                        altAccountNumber,
                        additAccountNumber1,
                        additAccountNumber2,
                        paymentAmount,
                        feeAmount,
                        customerFirstName,
                        customerLastName,
                        paymentType,
                        senderFirstName,
                        senderLastName,
                        TransactionMode,
                        TerminalSerialNumber}, this.DoBillPresentmentOldSerialOperationCompleted, userState);
        }
        
        private void OnDoBillPresentmentOldSerialOperationCompleted(object arg) {
            if ((this.DoBillPresentmentOldSerialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoBillPresentmentOldSerialCompleted(this, new DoBillPresentmentOldSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoDailyReconciliat" +
            "ionOld", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReconciliationResponse DoDailyReconciliationOld(int MerchantId, string TID, string Password, string Cashier, string batchDate, bool detailedResponse, string TransactionMode) {
            object[] results = this.Invoke("DoDailyReconciliationOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        batchDate,
                        detailedResponse,
                        TransactionMode});
            return ((ReconciliationResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoDailyReconciliationOldAsync(int MerchantId, string TID, string Password, string Cashier, string batchDate, bool detailedResponse, string TransactionMode) {
            this.DoDailyReconciliationOldAsync(MerchantId, TID, Password, Cashier, batchDate, detailedResponse, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoDailyReconciliationOldAsync(int MerchantId, string TID, string Password, string Cashier, string batchDate, bool detailedResponse, string TransactionMode, object userState) {
            if ((this.DoDailyReconciliationOldOperationCompleted == null)) {
                this.DoDailyReconciliationOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoDailyReconciliationOldOperationCompleted);
            }
            this.InvokeAsync("DoDailyReconciliationOld", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        batchDate,
                        detailedResponse,
                        TransactionMode}, this.DoDailyReconciliationOldOperationCompleted, userState);
        }
        
        private void OnDoDailyReconciliationOldOperationCompleted(object arg) {
            if ((this.DoDailyReconciliationOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoDailyReconciliationOldCompleted(this, new DoDailyReconciliationOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoDailyReconciliat" +
            "ionOldSerial", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReconciliationResponse DoDailyReconciliationOldSerial(int MerchantId, string TID, string Password, string Cashier, string batchDate, bool detailedResponse, string TransactionMode, string TerminalSerialNumber) {
            object[] results = this.Invoke("DoDailyReconciliationOldSerial", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        batchDate,
                        detailedResponse,
                        TransactionMode,
                        TerminalSerialNumber});
            return ((ReconciliationResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoDailyReconciliationOldSerialAsync(int MerchantId, string TID, string Password, string Cashier, string batchDate, bool detailedResponse, string TransactionMode, string TerminalSerialNumber) {
            this.DoDailyReconciliationOldSerialAsync(MerchantId, TID, Password, Cashier, batchDate, detailedResponse, TransactionMode, TerminalSerialNumber, null);
        }
        
        /// <remarks/>
        public void DoDailyReconciliationOldSerialAsync(int MerchantId, string TID, string Password, string Cashier, string batchDate, bool detailedResponse, string TransactionMode, string TerminalSerialNumber, object userState) {
            if ((this.DoDailyReconciliationOldSerialOperationCompleted == null)) {
                this.DoDailyReconciliationOldSerialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoDailyReconciliationOldSerialOperationCompleted);
            }
            this.InvokeAsync("DoDailyReconciliationOldSerial", new object[] {
                        MerchantId,
                        TID,
                        Password,
                        Cashier,
                        batchDate,
                        detailedResponse,
                        TransactionMode,
                        TerminalSerialNumber}, this.DoDailyReconciliationOldSerialOperationCompleted, userState);
        }
        
        private void OnDoDailyReconciliationOldSerialOperationCompleted(object arg) {
            if ((this.DoDailyReconciliationOldSerialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoDailyReconciliationOldSerialCompleted(this, new DoDailyReconciliationOldSerialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetTCATollsBalance" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TCABalanceResponse GetTCATollsBalance(int merchantId, string TID, string password, string cashier, string accountNumber, string accountZipCode, string transactionMode) {
            object[] results = this.Invoke("GetTCATollsBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        accountZipCode,
                        transactionMode});
            return ((TCABalanceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetTCATollsBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string accountZipCode, string transactionMode) {
            this.GetTCATollsBalanceAsync(merchantId, TID, password, cashier, accountNumber, accountZipCode, transactionMode, null);
        }
        
        /// <remarks/>
        public void GetTCATollsBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string accountZipCode, string transactionMode, object userState) {
            if ((this.GetTCATollsBalanceOperationCompleted == null)) {
                this.GetTCATollsBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTCATollsBalanceOperationCompleted);
            }
            this.InvokeAsync("GetTCATollsBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        accountZipCode,
                        transactionMode}, this.GetTCATollsBalanceOperationCompleted, userState);
        }
        
        private void OnGetTCATollsBalanceOperationCompleted(object arg) {
            if ((this.GetTCATollsBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTCATollsBalanceCompleted(this, new GetTCATollsBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTCATollsReplenis" +
            "hment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TCAReplenishmentResponse DoTCATollsReplenishment(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string transactionMode) {
            object[] results = this.Invoke("DoTCATollsReplenishment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        transactionMode});
            return ((TCAReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoTCATollsReplenishmentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string transactionMode) {
            this.DoTCATollsReplenishmentAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoTCATollsReplenishmentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string transactionMode, object userState) {
            if ((this.DoTCATollsReplenishmentOperationCompleted == null)) {
                this.DoTCATollsReplenishmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTCATollsReplenishmentOperationCompleted);
            }
            this.InvokeAsync("DoTCATollsReplenishment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        transactionMode}, this.DoTCATollsReplenishmentOperationCompleted, userState);
        }
        
        private void OnDoTCATollsReplenishmentOperationCompleted(object arg) {
            if ((this.DoTCATollsReplenishmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTCATollsReplenishmentCompleted(this, new DoTCATollsReplenishmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTCATollsReplenis" +
            "hmentByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TCAReplenishmentResponse DoTCATollsReplenishmentByStore(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string storeId, string zipCode, string transactionMode) {
            object[] results = this.Invoke("DoTCATollsReplenishmentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        zipCode,
                        transactionMode});
            return ((TCAReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoTCATollsReplenishmentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string storeId, string zipCode, string transactionMode) {
            this.DoTCATollsReplenishmentByStoreAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, storeId, zipCode, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoTCATollsReplenishmentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, double amount, double feeAmount, string purchaseId, string storeId, string zipCode, string transactionMode, object userState) {
            if ((this.DoTCATollsReplenishmentByStoreOperationCompleted == null)) {
                this.DoTCATollsReplenishmentByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTCATollsReplenishmentByStoreOperationCompleted);
            }
            this.InvokeAsync("DoTCATollsReplenishmentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        zipCode,
                        transactionMode}, this.DoTCATollsReplenishmentByStoreOperationCompleted, userState);
        }
        
        private void OnDoTCATollsReplenishmentByStoreOperationCompleted(object arg) {
            if ((this.DoTCATollsReplenishmentByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTCATollsReplenishmentByStoreCompleted(this, new DoTCATollsReplenishmentByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTCATollsDocument" +
            "Inquiry", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TCADocumentInquiryResponse DoTCATollsDocumentInquiry(int merchantId, string TID, string password, string cashier, string accountNumber, string accountId, string transactionMode) {
            object[] results = this.Invoke("DoTCATollsDocumentInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        accountId,
                        transactionMode});
            return ((TCADocumentInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentInquiryAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string accountId, string transactionMode) {
            this.DoTCATollsDocumentInquiryAsync(merchantId, TID, password, cashier, accountNumber, accountId, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentInquiryAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string accountId, string transactionMode, object userState) {
            if ((this.DoTCATollsDocumentInquiryOperationCompleted == null)) {
                this.DoTCATollsDocumentInquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTCATollsDocumentInquiryOperationCompleted);
            }
            this.InvokeAsync("DoTCATollsDocumentInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        accountId,
                        transactionMode}, this.DoTCATollsDocumentInquiryOperationCompleted, userState);
        }
        
        private void OnDoTCATollsDocumentInquiryOperationCompleted(object arg) {
            if ((this.DoTCATollsDocumentInquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTCATollsDocumentInquiryCompleted(this, new DoTCATollsDocumentInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTCATollsDocument" +
            "InquiryByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TCADocumentInquiryResponse DoTCATollsDocumentInquiryByStore(int merchantId, string TID, string password, string cashier, string accountNumber, string accountId, string storeId, string zipCode, string transactionMode) {
            object[] results = this.Invoke("DoTCATollsDocumentInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        accountId,
                        storeId,
                        zipCode,
                        transactionMode});
            return ((TCADocumentInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string accountId, string storeId, string zipCode, string transactionMode) {
            this.DoTCATollsDocumentInquiryByStoreAsync(merchantId, TID, password, cashier, accountNumber, accountId, storeId, zipCode, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string accountId, string storeId, string zipCode, string transactionMode, object userState) {
            if ((this.DoTCATollsDocumentInquiryByStoreOperationCompleted == null)) {
                this.DoTCATollsDocumentInquiryByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTCATollsDocumentInquiryByStoreOperationCompleted);
            }
            this.InvokeAsync("DoTCATollsDocumentInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        accountId,
                        storeId,
                        zipCode,
                        transactionMode}, this.DoTCATollsDocumentInquiryByStoreOperationCompleted, userState);
        }
        
        private void OnDoTCATollsDocumentInquiryByStoreOperationCompleted(object arg) {
            if ((this.DoTCATollsDocumentInquiryByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTCATollsDocumentInquiryByStoreCompleted(this, new DoTCATollsDocumentInquiryByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTCATollsDocument" +
            "Payment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TCADocumentPaymentResponse DoTCATollsDocumentPayment(int merchantId, string TID, string password, string cashier, long transactionId, double amount, double feeAmount, string purchaseId, TCADocument[] paidDocuments, string transactionMode) {
            object[] results = this.Invoke("DoTCATollsDocumentPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        transactionMode});
            return ((TCADocumentPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentPaymentAsync(int merchantId, string TID, string password, string cashier, long transactionId, double amount, double feeAmount, string purchaseId, TCADocument[] paidDocuments, string transactionMode) {
            this.DoTCATollsDocumentPaymentAsync(merchantId, TID, password, cashier, transactionId, amount, feeAmount, purchaseId, paidDocuments, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentPaymentAsync(int merchantId, string TID, string password, string cashier, long transactionId, double amount, double feeAmount, string purchaseId, TCADocument[] paidDocuments, string transactionMode, object userState) {
            if ((this.DoTCATollsDocumentPaymentOperationCompleted == null)) {
                this.DoTCATollsDocumentPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTCATollsDocumentPaymentOperationCompleted);
            }
            this.InvokeAsync("DoTCATollsDocumentPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        transactionMode}, this.DoTCATollsDocumentPaymentOperationCompleted, userState);
        }
        
        private void OnDoTCATollsDocumentPaymentOperationCompleted(object arg) {
            if ((this.DoTCATollsDocumentPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTCATollsDocumentPaymentCompleted(this, new DoTCATollsDocumentPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoTCATollsDocument" +
            "PaymentByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TCADocumentPaymentResponse DoTCATollsDocumentPaymentByStore(int merchantId, string TID, string password, string cashier, long transactionId, double amount, double feeAmount, string purchaseId, TCADocument[] paidDocuments, string storeId, string zipCode, string transactionMode) {
            object[] results = this.Invoke("DoTCATollsDocumentPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        storeId,
                        zipCode,
                        transactionMode});
            return ((TCADocumentPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentPaymentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, double amount, double feeAmount, string purchaseId, TCADocument[] paidDocuments, string storeId, string zipCode, string transactionMode) {
            this.DoTCATollsDocumentPaymentByStoreAsync(merchantId, TID, password, cashier, transactionId, amount, feeAmount, purchaseId, paidDocuments, storeId, zipCode, transactionMode, null);
        }
        
        /// <remarks/>
        public void DoTCATollsDocumentPaymentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, double amount, double feeAmount, string purchaseId, TCADocument[] paidDocuments, string storeId, string zipCode, string transactionMode, object userState) {
            if ((this.DoTCATollsDocumentPaymentByStoreOperationCompleted == null)) {
                this.DoTCATollsDocumentPaymentByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoTCATollsDocumentPaymentByStoreOperationCompleted);
            }
            this.InvokeAsync("DoTCATollsDocumentPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        amount,
                        feeAmount,
                        purchaseId,
                        paidDocuments,
                        storeId,
                        zipCode,
                        transactionMode}, this.DoTCATollsDocumentPaymentByStoreOperationCompleted, userState);
        }
        
        private void OnDoTCATollsDocumentPaymentByStoreOperationCompleted(object arg) {
            if ((this.DoTCATollsDocumentPaymentByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoTCATollsDocumentPaymentByStoreCompleted(this, new DoTCATollsDocumentPaymentByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackGetAccoun" +
            "tBalance", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTBalanceResponse FastTrackGetAccountBalance(int merchantId, string TID, string password, string cashier, string accountNumber, string zipCode, string transactionMode) {
            object[] results = this.Invoke("FastTrackGetAccountBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        zipCode,
                        transactionMode});
            return ((FTBalanceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackGetAccountBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string zipCode, string transactionMode) {
            this.FastTrackGetAccountBalanceAsync(merchantId, TID, password, cashier, accountNumber, zipCode, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackGetAccountBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string zipCode, string transactionMode, object userState) {
            if ((this.FastTrackGetAccountBalanceOperationCompleted == null)) {
                this.FastTrackGetAccountBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackGetAccountBalanceOperationCompleted);
            }
            this.InvokeAsync("FastTrackGetAccountBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        zipCode,
                        transactionMode}, this.FastTrackGetAccountBalanceOperationCompleted, userState);
        }
        
        private void OnFastTrackGetAccountBalanceOperationCompleted(object arg) {
            if ((this.FastTrackGetAccountBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackGetAccountBalanceCompleted(this, new FastTrackGetAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackReplenish" +
            "Account", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTReplenishmentResponse FastTrackReplenishAccount(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            object[] results = this.Invoke("FastTrackReplenishAccount", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode});
            return ((FTReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackReplenishAccountAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            this.FastTrackReplenishAccountAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, senderFirstName, senderMiddleName, senderLastName, senderAddressLine1, senderAddressLine2, senderCity, senderState, senderZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackReplenishAccountAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode, 
                    object userState) {
            if ((this.FastTrackReplenishAccountOperationCompleted == null)) {
                this.FastTrackReplenishAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackReplenishAccountOperationCompleted);
            }
            this.InvokeAsync("FastTrackReplenishAccount", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode}, this.FastTrackReplenishAccountOperationCompleted, userState);
        }
        
        private void OnFastTrackReplenishAccountOperationCompleted(object arg) {
            if ((this.FastTrackReplenishAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackReplenishAccountCompleted(this, new FastTrackReplenishAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackReplenish" +
            "AccountByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTReplenishmentResponse FastTrackReplenishAccountByStore(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string storeId, 
                    string storeZip, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            object[] results = this.Invoke("FastTrackReplenishAccountByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        storeZip,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode});
            return ((FTReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackReplenishAccountByStoreAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string storeId, 
                    string storeZip, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            this.FastTrackReplenishAccountByStoreAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, storeId, storeZip, senderFirstName, senderMiddleName, senderLastName, senderAddressLine1, senderAddressLine2, senderCity, senderState, senderZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackReplenishAccountByStoreAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string storeId, 
                    string storeZip, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode, 
                    object userState) {
            if ((this.FastTrackReplenishAccountByStoreOperationCompleted == null)) {
                this.FastTrackReplenishAccountByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackReplenishAccountByStoreOperationCompleted);
            }
            this.InvokeAsync("FastTrackReplenishAccountByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        storeZip,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode}, this.FastTrackReplenishAccountByStoreOperationCompleted, userState);
        }
        
        private void OnFastTrackReplenishAccountByStoreOperationCompleted(object arg) {
            if ((this.FastTrackReplenishAccountByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackReplenishAccountByStoreCompleted(this, new FastTrackReplenishAccountByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackGetLicens" +
            "ePlateAccountBalance", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTBalanceResponse FastTrackGetLicensePlateAccountBalance(int merchantId, string TID, string password, string cashier, string accountNumber, string zipCode, string transactionMode) {
            object[] results = this.Invoke("FastTrackGetLicensePlateAccountBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        zipCode,
                        transactionMode});
            return ((FTBalanceResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackGetLicensePlateAccountBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string zipCode, string transactionMode) {
            this.FastTrackGetLicensePlateAccountBalanceAsync(merchantId, TID, password, cashier, accountNumber, zipCode, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackGetLicensePlateAccountBalanceAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string zipCode, string transactionMode, object userState) {
            if ((this.FastTrackGetLicensePlateAccountBalanceOperationCompleted == null)) {
                this.FastTrackGetLicensePlateAccountBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackGetLicensePlateAccountBalanceOperationCompleted);
            }
            this.InvokeAsync("FastTrackGetLicensePlateAccountBalance", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        zipCode,
                        transactionMode}, this.FastTrackGetLicensePlateAccountBalanceOperationCompleted, userState);
        }
        
        private void OnFastTrackGetLicensePlateAccountBalanceOperationCompleted(object arg) {
            if ((this.FastTrackGetLicensePlateAccountBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackGetLicensePlateAccountBalanceCompleted(this, new FastTrackGetLicensePlateAccountBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackReplenish" +
            "LicensePlateAccount", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTReplenishmentResponse FastTrackReplenishLicensePlateAccount(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            object[] results = this.Invoke("FastTrackReplenishLicensePlateAccount", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode});
            return ((FTReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackReplenishLicensePlateAccountAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            this.FastTrackReplenishLicensePlateAccountAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, senderFirstName, senderMiddleName, senderLastName, senderAddressLine1, senderAddressLine2, senderCity, senderState, senderZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackReplenishLicensePlateAccountAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode, 
                    object userState) {
            if ((this.FastTrackReplenishLicensePlateAccountOperationCompleted == null)) {
                this.FastTrackReplenishLicensePlateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackReplenishLicensePlateAccountOperationCompleted);
            }
            this.InvokeAsync("FastTrackReplenishLicensePlateAccount", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode}, this.FastTrackReplenishLicensePlateAccountOperationCompleted, userState);
        }
        
        private void OnFastTrackReplenishLicensePlateAccountOperationCompleted(object arg) {
            if ((this.FastTrackReplenishLicensePlateAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackReplenishLicensePlateAccountCompleted(this, new FastTrackReplenishLicensePlateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackReplenish" +
            "LicensePlateAccountByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTReplenishmentResponse FastTrackReplenishLicensePlateAccountByStore(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string storeId, 
                    string storeZip, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            object[] results = this.Invoke("FastTrackReplenishLicensePlateAccountByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        storeZip,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode});
            return ((FTReplenishmentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackReplenishLicensePlateAccountByStoreAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string storeId, 
                    string storeZip, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode) {
            this.FastTrackReplenishLicensePlateAccountByStoreAsync(merchantId, TID, password, cashier, transactionId, accountNumber, amount, feeAmount, purchaseId, storeId, storeZip, senderFirstName, senderMiddleName, senderLastName, senderAddressLine1, senderAddressLine2, senderCity, senderState, senderZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackReplenishLicensePlateAccountByStoreAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string accountNumber, 
                    double amount, 
                    double feeAmount, 
                    string purchaseId, 
                    string storeId, 
                    string storeZip, 
                    string senderFirstName, 
                    string senderMiddleName, 
                    string senderLastName, 
                    string senderAddressLine1, 
                    string senderAddressLine2, 
                    string senderCity, 
                    string senderState, 
                    string senderZip, 
                    string transactionMode, 
                    object userState) {
            if ((this.FastTrackReplenishLicensePlateAccountByStoreOperationCompleted == null)) {
                this.FastTrackReplenishLicensePlateAccountByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackReplenishLicensePlateAccountByStoreOperationCompleted);
            }
            this.InvokeAsync("FastTrackReplenishLicensePlateAccountByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        storeZip,
                        senderFirstName,
                        senderMiddleName,
                        senderLastName,
                        senderAddressLine1,
                        senderAddressLine2,
                        senderCity,
                        senderState,
                        senderZip,
                        transactionMode}, this.FastTrackReplenishLicensePlateAccountByStoreOperationCompleted, userState);
        }
        
        private void OnFastTrackReplenishLicensePlateAccountByStoreOperationCompleted(object arg) {
            if ((this.FastTrackReplenishLicensePlateAccountByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackReplenishLicensePlateAccountByStoreCompleted(this, new FastTrackReplenishLicensePlateAccountByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackDocumentI" +
            "nquiry", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTDocumentInquiryResponse FastTrackDocumentInquiry(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, DocumentType documentType, string transactionMode) {
            object[] results = this.Invoke("FastTrackDocumentInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        documentType,
                        transactionMode});
            return ((FTDocumentInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackDocumentInquiryAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, DocumentType documentType, string transactionMode) {
            this.FastTrackDocumentInquiryAsync(merchantId, TID, password, cashier, accountNumber, licensePlateNumber, documentType, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackDocumentInquiryAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, DocumentType documentType, string transactionMode, object userState) {
            if ((this.FastTrackDocumentInquiryOperationCompleted == null)) {
                this.FastTrackDocumentInquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackDocumentInquiryOperationCompleted);
            }
            this.InvokeAsync("FastTrackDocumentInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        documentType,
                        transactionMode}, this.FastTrackDocumentInquiryOperationCompleted, userState);
        }
        
        private void OnFastTrackDocumentInquiryOperationCompleted(object arg) {
            if ((this.FastTrackDocumentInquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackDocumentInquiryCompleted(this, new FastTrackDocumentInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackDocumentP" +
            "ayment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTDocumentPaymentResponse FastTrackDocumentPayment(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, DocumentType documentType, double amount, double feeAmount, string purchaseId, string transactionMode) {
            object[] results = this.Invoke("FastTrackDocumentPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        documentType,
                        amount,
                        feeAmount,
                        purchaseId,
                        transactionMode});
            return ((FTDocumentPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackDocumentPaymentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, DocumentType documentType, double amount, double feeAmount, string purchaseId, string transactionMode) {
            this.FastTrackDocumentPaymentAsync(merchantId, TID, password, cashier, transactionId, accountNumber, documentType, amount, feeAmount, purchaseId, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackDocumentPaymentAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, DocumentType documentType, double amount, double feeAmount, string purchaseId, string transactionMode, object userState) {
            if ((this.FastTrackDocumentPaymentOperationCompleted == null)) {
                this.FastTrackDocumentPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackDocumentPaymentOperationCompleted);
            }
            this.InvokeAsync("FastTrackDocumentPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        documentType,
                        amount,
                        feeAmount,
                        purchaseId,
                        transactionMode}, this.FastTrackDocumentPaymentOperationCompleted, userState);
        }
        
        private void OnFastTrackDocumentPaymentOperationCompleted(object arg) {
            if ((this.FastTrackDocumentPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackDocumentPaymentCompleted(this, new FastTrackDocumentPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackDocumentI" +
            "nquiryByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTDocumentInquiryResponse FastTrackDocumentInquiryByStore(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, DocumentType documentType, string storeId, string storeZip, string transactionMode) {
            object[] results = this.Invoke("FastTrackDocumentInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        documentType,
                        storeId,
                        storeZip,
                        transactionMode});
            return ((FTDocumentInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackDocumentInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, DocumentType documentType, string storeId, string storeZip, string transactionMode) {
            this.FastTrackDocumentInquiryByStoreAsync(merchantId, TID, password, cashier, accountNumber, licensePlateNumber, documentType, storeId, storeZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackDocumentInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string accountNumber, string licensePlateNumber, DocumentType documentType, string storeId, string storeZip, string transactionMode, object userState) {
            if ((this.FastTrackDocumentInquiryByStoreOperationCompleted == null)) {
                this.FastTrackDocumentInquiryByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackDocumentInquiryByStoreOperationCompleted);
            }
            this.InvokeAsync("FastTrackDocumentInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        accountNumber,
                        licensePlateNumber,
                        documentType,
                        storeId,
                        storeZip,
                        transactionMode}, this.FastTrackDocumentInquiryByStoreOperationCompleted, userState);
        }
        
        private void OnFastTrackDocumentInquiryByStoreOperationCompleted(object arg) {
            if ((this.FastTrackDocumentInquiryByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackDocumentInquiryByStoreCompleted(this, new FastTrackDocumentInquiryByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackDocumentP" +
            "aymentByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTDocumentPaymentResponse FastTrackDocumentPaymentByStore(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, DocumentType documentType, double amount, double feeAmount, string purchaseId, string storeId, string storeZip, string transactionMode) {
            object[] results = this.Invoke("FastTrackDocumentPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        documentType,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        storeZip,
                        transactionMode});
            return ((FTDocumentPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackDocumentPaymentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, DocumentType documentType, double amount, double feeAmount, string purchaseId, string storeId, string storeZip, string transactionMode) {
            this.FastTrackDocumentPaymentByStoreAsync(merchantId, TID, password, cashier, transactionId, accountNumber, documentType, amount, feeAmount, purchaseId, storeId, storeZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackDocumentPaymentByStoreAsync(int merchantId, string TID, string password, string cashier, long transactionId, string accountNumber, DocumentType documentType, double amount, double feeAmount, string purchaseId, string storeId, string storeZip, string transactionMode, object userState) {
            if ((this.FastTrackDocumentPaymentByStoreOperationCompleted == null)) {
                this.FastTrackDocumentPaymentByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackDocumentPaymentByStoreOperationCompleted);
            }
            this.InvokeAsync("FastTrackDocumentPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        accountNumber,
                        documentType,
                        amount,
                        feeAmount,
                        purchaseId,
                        storeId,
                        storeZip,
                        transactionMode}, this.FastTrackDocumentPaymentByStoreOperationCompleted, userState);
        }
        
        private void OnFastTrackDocumentPaymentByStoreOperationCompleted(object arg) {
            if ((this.FastTrackDocumentPaymentByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackDocumentPaymentByStoreCompleted(this, new FastTrackDocumentPaymentByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackOneTimeTo" +
            "llInquiry", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTOneTimeTollInquiryResponse FastTrackOneTimeTollInquiry(int merchantId, string TID, string password, string cashier, string licensePlateNumber, string licenseState, string vehicleAxle, string vehicleMake, string vehicleModel, int tripCount, string travelDate, string transactionMode) {
            object[] results = this.Invoke("FastTrackOneTimeTollInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        transactionMode});
            return ((FTOneTimeTollInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollInquiryAsync(int merchantId, string TID, string password, string cashier, string licensePlateNumber, string licenseState, string vehicleAxle, string vehicleMake, string vehicleModel, int tripCount, string travelDate, string transactionMode) {
            this.FastTrackOneTimeTollInquiryAsync(merchantId, TID, password, cashier, licensePlateNumber, licenseState, vehicleAxle, vehicleMake, vehicleModel, tripCount, travelDate, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollInquiryAsync(int merchantId, string TID, string password, string cashier, string licensePlateNumber, string licenseState, string vehicleAxle, string vehicleMake, string vehicleModel, int tripCount, string travelDate, string transactionMode, object userState) {
            if ((this.FastTrackOneTimeTollInquiryOperationCompleted == null)) {
                this.FastTrackOneTimeTollInquiryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackOneTimeTollInquiryOperationCompleted);
            }
            this.InvokeAsync("FastTrackOneTimeTollInquiry", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        transactionMode}, this.FastTrackOneTimeTollInquiryOperationCompleted, userState);
        }
        
        private void OnFastTrackOneTimeTollInquiryOperationCompleted(object arg) {
            if ((this.FastTrackOneTimeTollInquiryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackOneTimeTollInquiryCompleted(this, new FastTrackOneTimeTollInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackOneTimeTo" +
            "llPayment", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTOneTimeTollPaymentResponse FastTrackOneTimeTollPayment(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string purchaseId, 
                    double amount, 
                    double feeAmount, 
                    string licensePlateNumber, 
                    string licenseState, 
                    string vehicleAxle, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string tripCount, 
                    string travelDate, 
                    string transactionMode) {
            object[] results = this.Invoke("FastTrackOneTimeTollPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        purchaseId,
                        amount,
                        feeAmount,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        transactionMode});
            return ((FTOneTimeTollPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollPaymentAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string purchaseId, 
                    double amount, 
                    double feeAmount, 
                    string licensePlateNumber, 
                    string licenseState, 
                    string vehicleAxle, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string tripCount, 
                    string travelDate, 
                    string transactionMode) {
            this.FastTrackOneTimeTollPaymentAsync(merchantId, TID, password, cashier, transactionId, purchaseId, amount, feeAmount, licensePlateNumber, licenseState, vehicleAxle, vehicleMake, vehicleModel, tripCount, travelDate, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollPaymentAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string purchaseId, 
                    double amount, 
                    double feeAmount, 
                    string licensePlateNumber, 
                    string licenseState, 
                    string vehicleAxle, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string tripCount, 
                    string travelDate, 
                    string transactionMode, 
                    object userState) {
            if ((this.FastTrackOneTimeTollPaymentOperationCompleted == null)) {
                this.FastTrackOneTimeTollPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackOneTimeTollPaymentOperationCompleted);
            }
            this.InvokeAsync("FastTrackOneTimeTollPayment", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        purchaseId,
                        amount,
                        feeAmount,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        transactionMode}, this.FastTrackOneTimeTollPaymentOperationCompleted, userState);
        }
        
        private void OnFastTrackOneTimeTollPaymentOperationCompleted(object arg) {
            if ((this.FastTrackOneTimeTollPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackOneTimeTollPaymentCompleted(this, new FastTrackOneTimeTollPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackOneTimeTo" +
            "llInquiryByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTOneTimeTollInquiryResponse FastTrackOneTimeTollInquiryByStore(int merchantId, string TID, string password, string cashier, string licensePlateNumber, string licenseState, string vehicleAxle, string vehicleMake, string vehicleModel, string tripCount, string travelDate, string storeId, string storeZip, string transactionMode) {
            object[] results = this.Invoke("FastTrackOneTimeTollInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        storeId,
                        storeZip,
                        transactionMode});
            return ((FTOneTimeTollInquiryResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string licensePlateNumber, string licenseState, string vehicleAxle, string vehicleMake, string vehicleModel, string tripCount, string travelDate, string storeId, string storeZip, string transactionMode) {
            this.FastTrackOneTimeTollInquiryByStoreAsync(merchantId, TID, password, cashier, licensePlateNumber, licenseState, vehicleAxle, vehicleMake, vehicleModel, tripCount, travelDate, storeId, storeZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollInquiryByStoreAsync(int merchantId, string TID, string password, string cashier, string licensePlateNumber, string licenseState, string vehicleAxle, string vehicleMake, string vehicleModel, string tripCount, string travelDate, string storeId, string storeZip, string transactionMode, object userState) {
            if ((this.FastTrackOneTimeTollInquiryByStoreOperationCompleted == null)) {
                this.FastTrackOneTimeTollInquiryByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackOneTimeTollInquiryByStoreOperationCompleted);
            }
            this.InvokeAsync("FastTrackOneTimeTollInquiryByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        storeId,
                        storeZip,
                        transactionMode}, this.FastTrackOneTimeTollInquiryByStoreOperationCompleted, userState);
        }
        
        private void OnFastTrackOneTimeTollInquiryByStoreOperationCompleted(object arg) {
            if ((this.FastTrackOneTimeTollInquiryByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackOneTimeTollInquiryByStoreCompleted(this, new FastTrackOneTimeTollInquiryByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/FastTrackOneTimeTo" +
            "llPaymentByStore", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FTOneTimeTollPaymentResponse FastTrackOneTimeTollPaymentByStore(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string purchaseId, 
                    double amount, 
                    double feeAmount, 
                    string licensePlateNumber, 
                    string licenseState, 
                    string vehicleAxle, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string tripCount, 
                    string travelDate, 
                    string storeId, 
                    string storeZip, 
                    string transactionMode) {
            object[] results = this.Invoke("FastTrackOneTimeTollPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        purchaseId,
                        amount,
                        feeAmount,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        storeId,
                        storeZip,
                        transactionMode});
            return ((FTOneTimeTollPaymentResponse)(results[0]));
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollPaymentByStoreAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string purchaseId, 
                    double amount, 
                    double feeAmount, 
                    string licensePlateNumber, 
                    string licenseState, 
                    string vehicleAxle, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string tripCount, 
                    string travelDate, 
                    string storeId, 
                    string storeZip, 
                    string transactionMode) {
            this.FastTrackOneTimeTollPaymentByStoreAsync(merchantId, TID, password, cashier, transactionId, purchaseId, amount, feeAmount, licensePlateNumber, licenseState, vehicleAxle, vehicleMake, vehicleModel, tripCount, travelDate, storeId, storeZip, transactionMode, null);
        }
        
        /// <remarks/>
        public void FastTrackOneTimeTollPaymentByStoreAsync(
                    int merchantId, 
                    string TID, 
                    string password, 
                    string cashier, 
                    long transactionId, 
                    string purchaseId, 
                    double amount, 
                    double feeAmount, 
                    string licensePlateNumber, 
                    string licenseState, 
                    string vehicleAxle, 
                    string vehicleMake, 
                    string vehicleModel, 
                    string tripCount, 
                    string travelDate, 
                    string storeId, 
                    string storeZip, 
                    string transactionMode, 
                    object userState) {
            if ((this.FastTrackOneTimeTollPaymentByStoreOperationCompleted == null)) {
                this.FastTrackOneTimeTollPaymentByStoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFastTrackOneTimeTollPaymentByStoreOperationCompleted);
            }
            this.InvokeAsync("FastTrackOneTimeTollPaymentByStore", new object[] {
                        merchantId,
                        TID,
                        password,
                        cashier,
                        transactionId,
                        purchaseId,
                        amount,
                        feeAmount,
                        licensePlateNumber,
                        licenseState,
                        vehicleAxle,
                        vehicleMake,
                        vehicleModel,
                        tripCount,
                        travelDate,
                        storeId,
                        storeZip,
                        transactionMode}, this.FastTrackOneTimeTollPaymentByStoreOperationCompleted, userState);
        }
        
        private void OnFastTrackOneTimeTollPaymentByStoreOperationCompleted(object arg) {
            if ((this.FastTrackOneTimeTollPaymentByStoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FastTrackOneTimeTollPaymentByStoreCompleted(this, new FastTrackOneTimeTollPaymentByStoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetMerchantBalance" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MerchantBalance GetMerchantBalance(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            object[] results = this.Invoke("GetMerchantBalance", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode});
            return ((MerchantBalance)(results[0]));
        }
        
        /// <remarks/>
        public void GetMerchantBalanceAsync(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            this.GetMerchantBalanceAsync(MID, TID, Password, Cashier, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetMerchantBalanceAsync(string MID, string TID, string Password, string Cashier, string TransactionMode, object userState) {
            if ((this.GetMerchantBalanceOperationCompleted == null)) {
                this.GetMerchantBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMerchantBalanceOperationCompleted);
            }
            this.InvokeAsync("GetMerchantBalance", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode}, this.GetMerchantBalanceOperationCompleted, userState);
        }
        
        private void OnGetMerchantBalanceOperationCompleted(object arg) {
            if ((this.GetMerchantBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMerchantBalanceCompleted(this, new GetMerchantBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/MetelePinlessVoidL" +
            "astLoad", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CreditResponse MetelePinlessVoidLastLoad(string MID, string TID, string Password, string Cashier, string PhoneNumber, double TopUpAmount, string TransactionMode) {
            object[] results = this.Invoke("MetelePinlessVoidLastLoad", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        PhoneNumber,
                        TopUpAmount,
                        TransactionMode});
            return ((CreditResponse)(results[0]));
        }
        
        /// <remarks/>
        public void MetelePinlessVoidLastLoadAsync(string MID, string TID, string Password, string Cashier, string PhoneNumber, double TopUpAmount, string TransactionMode) {
            this.MetelePinlessVoidLastLoadAsync(MID, TID, Password, Cashier, PhoneNumber, TopUpAmount, TransactionMode, null);
        }
        
        /// <remarks/>
        public void MetelePinlessVoidLastLoadAsync(string MID, string TID, string Password, string Cashier, string PhoneNumber, double TopUpAmount, string TransactionMode, object userState) {
            if ((this.MetelePinlessVoidLastLoadOperationCompleted == null)) {
                this.MetelePinlessVoidLastLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMetelePinlessVoidLastLoadOperationCompleted);
            }
            this.InvokeAsync("MetelePinlessVoidLastLoad", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        PhoneNumber,
                        TopUpAmount,
                        TransactionMode}, this.MetelePinlessVoidLastLoadOperationCompleted, userState);
        }
        
        private void OnMetelePinlessVoidLastLoadOperationCompleted(object arg) {
            if ((this.MetelePinlessVoidLastLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MetelePinlessVoidLastLoadCompleted(this, new MetelePinlessVoidLastLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessVoidLastL" +
            "oad", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CreditResponse OKPinlessVoidLastLoad(string MID, string TID, string Password, string Cashier, string PhoneNumber, double TopUpAmount, string OrderId, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessVoidLastLoad", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        PhoneNumber,
                        TopUpAmount,
                        OrderId,
                        TransactionMode});
            return ((CreditResponse)(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessVoidLastLoadAsync(string MID, string TID, string Password, string Cashier, string PhoneNumber, double TopUpAmount, string OrderId, string TransactionMode) {
            this.OKPinlessVoidLastLoadAsync(MID, TID, Password, Cashier, PhoneNumber, TopUpAmount, OrderId, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessVoidLastLoadAsync(string MID, string TID, string Password, string Cashier, string PhoneNumber, double TopUpAmount, string OrderId, string TransactionMode, object userState) {
            if ((this.OKPinlessVoidLastLoadOperationCompleted == null)) {
                this.OKPinlessVoidLastLoadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessVoidLastLoadOperationCompleted);
            }
            this.InvokeAsync("OKPinlessVoidLastLoad", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        PhoneNumber,
                        TopUpAmount,
                        OrderId,
                        TransactionMode}, this.OKPinlessVoidLastLoadOperationCompleted, userState);
        }
        
        private void OnOKPinlessVoidLastLoadOperationCompleted(object arg) {
            if ((this.OKPinlessVoidLastLoadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessVoidLastLoadCompleted(this, new OKPinlessVoidLastLoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessAddPhoneN" +
            "umber", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response OKPinlessAddPhoneNumber(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string NewPhoneNumber, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessAddPhoneNumber", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ExistingPhoneNumber,
                        NewPhoneNumber,
                        TransactionMode});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessAddPhoneNumberAsync(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string NewPhoneNumber, string TransactionMode) {
            this.OKPinlessAddPhoneNumberAsync(MID, TID, Password, Cashier, ExistingPhoneNumber, NewPhoneNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessAddPhoneNumberAsync(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string NewPhoneNumber, string TransactionMode, object userState) {
            if ((this.OKPinlessAddPhoneNumberOperationCompleted == null)) {
                this.OKPinlessAddPhoneNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessAddPhoneNumberOperationCompleted);
            }
            this.InvokeAsync("OKPinlessAddPhoneNumber", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ExistingPhoneNumber,
                        NewPhoneNumber,
                        TransactionMode}, this.OKPinlessAddPhoneNumberOperationCompleted, userState);
        }
        
        private void OnOKPinlessAddPhoneNumberOperationCompleted(object arg) {
            if ((this.OKPinlessAddPhoneNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessAddPhoneNumberCompleted(this, new OKPinlessAddPhoneNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessBalance", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response OKPinlessBalance(string MID, string TID, string Password, string Cashier, string AccountNumber, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessBalance", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountNumber,
                        TransactionMode});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessBalanceAsync(string MID, string TID, string Password, string Cashier, string AccountNumber, string TransactionMode) {
            this.OKPinlessBalanceAsync(MID, TID, Password, Cashier, AccountNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessBalanceAsync(string MID, string TID, string Password, string Cashier, string AccountNumber, string TransactionMode, object userState) {
            if ((this.OKPinlessBalanceOperationCompleted == null)) {
                this.OKPinlessBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessBalanceOperationCompleted);
            }
            this.InvokeAsync("OKPinlessBalance", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountNumber,
                        TransactionMode}, this.OKPinlessBalanceOperationCompleted, userState);
        }
        
        private void OnOKPinlessBalanceOperationCompleted(object arg) {
            if ((this.OKPinlessBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessBalanceCompleted(this, new OKPinlessBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessDeletePho" +
            "neNumber", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response OKPinlessDeletePhoneNumber(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessDeletePhoneNumber", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ExistingPhoneNumber,
                        TransactionMode});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessDeletePhoneNumberAsync(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string TransactionMode) {
            this.OKPinlessDeletePhoneNumberAsync(MID, TID, Password, Cashier, ExistingPhoneNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessDeletePhoneNumberAsync(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string TransactionMode, object userState) {
            if ((this.OKPinlessDeletePhoneNumberOperationCompleted == null)) {
                this.OKPinlessDeletePhoneNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessDeletePhoneNumberOperationCompleted);
            }
            this.InvokeAsync("OKPinlessDeletePhoneNumber", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ExistingPhoneNumber,
                        TransactionMode}, this.OKPinlessDeletePhoneNumberOperationCompleted, userState);
        }
        
        private void OnOKPinlessDeletePhoneNumberOperationCompleted(object arg) {
            if ((this.OKPinlessDeletePhoneNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessDeletePhoneNumberCompleted(this, new OKPinlessDeletePhoneNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessEditPhone" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool OKPinlessEditPhone(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string NewPhoneNumber, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessEditPhone", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ExistingPhoneNumber,
                        NewPhoneNumber,
                        TransactionMode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessEditPhoneAsync(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string NewPhoneNumber, string TransactionMode) {
            this.OKPinlessEditPhoneAsync(MID, TID, Password, Cashier, ExistingPhoneNumber, NewPhoneNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessEditPhoneAsync(string MID, string TID, string Password, string Cashier, string ExistingPhoneNumber, string NewPhoneNumber, string TransactionMode, object userState) {
            if ((this.OKPinlessEditPhoneOperationCompleted == null)) {
                this.OKPinlessEditPhoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessEditPhoneOperationCompleted);
            }
            this.InvokeAsync("OKPinlessEditPhone", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ExistingPhoneNumber,
                        NewPhoneNumber,
                        TransactionMode}, this.OKPinlessEditPhoneOperationCompleted, userState);
        }
        
        private void OnOKPinlessEditPhoneOperationCompleted(object arg) {
            if ((this.OKPinlessEditPhoneCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessEditPhoneCompleted(this, new OKPinlessEditPhoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessFindAccou" +
            "nt", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response OKPinlessFindAccount(string MID, string TID, string Password, string Cashier, string AccountNumber, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessFindAccount", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountNumber,
                        TransactionMode});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessFindAccountAsync(string MID, string TID, string Password, string Cashier, string AccountNumber, string TransactionMode) {
            this.OKPinlessFindAccountAsync(MID, TID, Password, Cashier, AccountNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessFindAccountAsync(string MID, string TID, string Password, string Cashier, string AccountNumber, string TransactionMode, object userState) {
            if ((this.OKPinlessFindAccountOperationCompleted == null)) {
                this.OKPinlessFindAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessFindAccountOperationCompleted);
            }
            this.InvokeAsync("OKPinlessFindAccount", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountNumber,
                        TransactionMode}, this.OKPinlessFindAccountOperationCompleted, userState);
        }
        
        private void OnOKPinlessFindAccountOperationCompleted(object arg) {
            if ((this.OKPinlessFindAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessFindAccountCompleted(this, new OKPinlessFindAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessGetCallHi" +
            "story", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OKPinlessGetCallHistoryResult")]
        public CallDetail[] OKPinlessGetCallHistory(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, System.DateTime StartDate, System.DateTime EndDate, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessGetCallHistory", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountPhoneNumber,
                        StartDate,
                        EndDate,
                        TransactionMode});
            return ((CallDetail[])(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessGetCallHistoryAsync(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, System.DateTime StartDate, System.DateTime EndDate, string TransactionMode) {
            this.OKPinlessGetCallHistoryAsync(MID, TID, Password, Cashier, AccountPhoneNumber, StartDate, EndDate, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessGetCallHistoryAsync(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, System.DateTime StartDate, System.DateTime EndDate, string TransactionMode, object userState) {
            if ((this.OKPinlessGetCallHistoryOperationCompleted == null)) {
                this.OKPinlessGetCallHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessGetCallHistoryOperationCompleted);
            }
            this.InvokeAsync("OKPinlessGetCallHistory", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountPhoneNumber,
                        StartDate,
                        EndDate,
                        TransactionMode}, this.OKPinlessGetCallHistoryOperationCompleted, userState);
        }
        
        private void OnOKPinlessGetCallHistoryOperationCompleted(object arg) {
            if ((this.OKPinlessGetCallHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessGetCallHistoryCompleted(this, new OKPinlessGetCallHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessGetCredit" +
            "Reasons", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OKPinlessGetCreditReasonsResult")]
        public DebitReason[] OKPinlessGetCreditReasons(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessGetCreditReasons", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode});
            return ((DebitReason[])(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessGetCreditReasonsAsync(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            this.OKPinlessGetCreditReasonsAsync(MID, TID, Password, Cashier, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessGetCreditReasonsAsync(string MID, string TID, string Password, string Cashier, string TransactionMode, object userState) {
            if ((this.OKPinlessGetCreditReasonsOperationCompleted == null)) {
                this.OKPinlessGetCreditReasonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessGetCreditReasonsOperationCompleted);
            }
            this.InvokeAsync("OKPinlessGetCreditReasons", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode}, this.OKPinlessGetCreditReasonsOperationCompleted, userState);
        }
        
        private void OnOKPinlessGetCreditReasonsOperationCompleted(object arg) {
            if ((this.OKPinlessGetCreditReasonsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessGetCreditReasonsCompleted(this, new OKPinlessGetCreditReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessGetPhoneR" +
            "eport", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Report OKPinlessGetPhoneReport(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessGetPhoneReport", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountPhoneNumber,
                        TransactionMode});
            return ((Report)(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessGetPhoneReportAsync(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, string TransactionMode) {
            this.OKPinlessGetPhoneReportAsync(MID, TID, Password, Cashier, AccountPhoneNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessGetPhoneReportAsync(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, string TransactionMode, object userState) {
            if ((this.OKPinlessGetPhoneReportOperationCompleted == null)) {
                this.OKPinlessGetPhoneReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessGetPhoneReportOperationCompleted);
            }
            this.InvokeAsync("OKPinlessGetPhoneReport", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountPhoneNumber,
                        TransactionMode}, this.OKPinlessGetPhoneReportOperationCompleted, userState);
        }
        
        private void OnOKPinlessGetPhoneReportOperationCompleted(object arg) {
            if ((this.OKPinlessGetPhoneReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessGetPhoneReportCompleted(this, new OKPinlessGetPhoneReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/OKPinlessGetPhoneR" +
            "eportDatailed", RequestElementName="OKPinlessGetPhoneReportDatailed", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseElementName="OKPinlessGetPhoneReportDatailedResponse", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("OKPinlessGetPhoneReportDatailedResult")]
        public ReportDetail[] OKPinlessGetPhoneReportDetailed(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, string TransactionMode) {
            object[] results = this.Invoke("OKPinlessGetPhoneReportDetailed", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountPhoneNumber,
                        TransactionMode});
            return ((ReportDetail[])(results[0]));
        }
        
        /// <remarks/>
        public void OKPinlessGetPhoneReportDetailedAsync(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, string TransactionMode) {
            this.OKPinlessGetPhoneReportDetailedAsync(MID, TID, Password, Cashier, AccountPhoneNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void OKPinlessGetPhoneReportDetailedAsync(string MID, string TID, string Password, string Cashier, string AccountPhoneNumber, string TransactionMode, object userState) {
            if ((this.OKPinlessGetPhoneReportDetailedOperationCompleted == null)) {
                this.OKPinlessGetPhoneReportDetailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOKPinlessGetPhoneReportDetailedOperationCompleted);
            }
            this.InvokeAsync("OKPinlessGetPhoneReportDetailed", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        AccountPhoneNumber,
                        TransactionMode}, this.OKPinlessGetPhoneReportDetailedOperationCompleted, userState);
        }
        
        private void OnOKPinlessGetPhoneReportDetailedOperationCompleted(object arg) {
            if ((this.OKPinlessGetPhoneReportDetailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OKPinlessGetPhoneReportDetailedCompleted(this, new OKPinlessGetPhoneReportDetailedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/DoPinCredit", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PinCreditResponse DoPinCredit(string MID, string TID, string Password, string Cashier, int OriginalOrderID, string ProductMaincode, decimal ProductDenomination, string ControlNumber, string PinNumber, string TransactionMode) {
            object[] results = this.Invoke("DoPinCredit", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        OriginalOrderID,
                        ProductMaincode,
                        ProductDenomination,
                        ControlNumber,
                        PinNumber,
                        TransactionMode});
            return ((PinCreditResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DoPinCreditAsync(string MID, string TID, string Password, string Cashier, int OriginalOrderID, string ProductMaincode, decimal ProductDenomination, string ControlNumber, string PinNumber, string TransactionMode) {
            this.DoPinCreditAsync(MID, TID, Password, Cashier, OriginalOrderID, ProductMaincode, ProductDenomination, ControlNumber, PinNumber, TransactionMode, null);
        }
        
        /// <remarks/>
        public void DoPinCreditAsync(string MID, string TID, string Password, string Cashier, int OriginalOrderID, string ProductMaincode, decimal ProductDenomination, string ControlNumber, string PinNumber, string TransactionMode, object userState) {
            if ((this.DoPinCreditOperationCompleted == null)) {
                this.DoPinCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoPinCreditOperationCompleted);
            }
            this.InvokeAsync("DoPinCredit", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        OriginalOrderID,
                        ProductMaincode,
                        ProductDenomination,
                        ControlNumber,
                        PinNumber,
                        TransactionMode}, this.DoPinCreditOperationCompleted, userState);
        }
        
        private void OnDoPinCreditOperationCompleted(object arg) {
            if ((this.DoPinCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoPinCreditCompleted(this, new DoPinCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductsCatalog" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Catalog GetProductsCatalog(string MID, string TID, string Password, string Cashier, int ProfileID, string TransactionMode) {
            object[] results = this.Invoke("GetProductsCatalog", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProfileID,
                        TransactionMode});
            return ((Catalog)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductsCatalogAsync(string MID, string TID, string Password, string Cashier, int ProfileID, string TransactionMode) {
            this.GetProductsCatalogAsync(MID, TID, Password, Cashier, ProfileID, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetProductsCatalogAsync(string MID, string TID, string Password, string Cashier, int ProfileID, string TransactionMode, object userState) {
            if ((this.GetProductsCatalogOperationCompleted == null)) {
                this.GetProductsCatalogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductsCatalogOperationCompleted);
            }
            this.InvokeAsync("GetProductsCatalog", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        ProfileID,
                        TransactionMode}, this.GetProductsCatalogOperationCompleted, userState);
        }
        
        private void OnGetProductsCatalogOperationCompleted(object arg) {
            if ((this.GetProductsCatalogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductsCatalogCompleted(this, new GetProductsCatalogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetProductProfiles" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetProductProfilesResult")]
        public Catalog[] GetProductProfiles(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            object[] results = this.Invoke("GetProductProfiles", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode});
            return ((Catalog[])(results[0]));
        }
        
        /// <remarks/>
        public void GetProductProfilesAsync(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            this.GetProductProfilesAsync(MID, TID, Password, Cashier, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetProductProfilesAsync(string MID, string TID, string Password, string Cashier, string TransactionMode, object userState) {
            if ((this.GetProductProfilesOperationCompleted == null)) {
                this.GetProductProfilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductProfilesOperationCompleted);
            }
            this.InvokeAsync("GetProductProfiles", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode}, this.GetProductProfilesOperationCompleted, userState);
        }
        
        private void OnGetProductProfilesOperationCompleted(object arg) {
            if ((this.GetProductProfilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductProfilesCompleted(this, new GetProductProfilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetAllDestinations" +
            "", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetAllDestinationsResult")]
        public Destination[] GetAllDestinations(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            object[] results = this.Invoke("GetAllDestinations", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode});
            return ((Destination[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllDestinationsAsync(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            this.GetAllDestinationsAsync(MID, TID, Password, Cashier, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetAllDestinationsAsync(string MID, string TID, string Password, string Cashier, string TransactionMode, object userState) {
            if ((this.GetAllDestinationsOperationCompleted == null)) {
                this.GetAllDestinationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllDestinationsOperationCompleted);
            }
            this.InvokeAsync("GetAllDestinations", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode}, this.GetAllDestinationsOperationCompleted, userState);
        }
        
        private void OnGetAllDestinationsOperationCompleted(object arg) {
            if ((this.GetAllDestinationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllDestinationsCompleted(this, new GetAllDestinationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://services.blackstoneonline.com/TransactionBroker/Broker/GetLegalInformatio" +
            "n", RequestNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", ResponseNamespace="https://services.blackstoneonline.com/TransactionBroker/Broker", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Legal GetLegalInformation(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            object[] results = this.Invoke("GetLegalInformation", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode});
            return ((Legal)(results[0]));
        }
        
        /// <remarks/>
        public void GetLegalInformationAsync(string MID, string TID, string Password, string Cashier, string TransactionMode) {
            this.GetLegalInformationAsync(MID, TID, Password, Cashier, TransactionMode, null);
        }
        
        /// <remarks/>
        public void GetLegalInformationAsync(string MID, string TID, string Password, string Cashier, string TransactionMode, object userState) {
            if ((this.GetLegalInformationOperationCompleted == null)) {
                this.GetLegalInformationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLegalInformationOperationCompleted);
            }
            this.InvokeAsync("GetLegalInformation", new object[] {
                        MID,
                        TID,
                        Password,
                        Cashier,
                        TransactionMode}, this.GetLegalInformationOperationCompleted, userState);
        }
        
        private void OnGetLegalInformationOperationCompleted(object arg) {
            if ((this.GetLegalInformationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLegalInformationCompleted(this, new GetLegalInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class PIN {
        
        private string errorCodeField;
        
        private string errorMessageField;
        
        private string transactionIDField;
        
        private string pinIDField;
        
        private string productMainCodeField;
        
        private string productDenominationField;
        
        private string pinNumberField;
        
        private string controlNumberField;
        
        private string languageField;
        
        private string productSBTField;
        
        private string conn800EnglishField;
        
        private string customerServiceEnglishField;
        
        private object[] localAccessPhonesField;
        
        private string itemFKField;
        
        private string transactionModeField;
        
        private string productDescriptionField;
        
        private string batchField;
        
        private string expirationDateField;
        
        private string productTypeField;
        
        private string barcodeField;
        
        private string instructionsField;
        
        private string printerDisclaimerField;
        
        private string toppedUpNumberField;
        
        private string accountNumberField;
        
        private Legal legalInfoField;
        
        private double foreignAmountField;
        
        private double foreignMoneyLeftField;
        
        private string referenceNumberField;
        
        private string authorizationCodeField;
        
        private string currencyCodeField;
        
        /// <remarks/>
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                return this.transactionIDField;
            }
            set {
                this.transactionIDField = value;
            }
        }
        
        /// <remarks/>
        public string PinID {
            get {
                return this.pinIDField;
            }
            set {
                this.pinIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProductMainCode {
            get {
                return this.productMainCodeField;
            }
            set {
                this.productMainCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ProductDenomination {
            get {
                return this.productDenominationField;
            }
            set {
                this.productDenominationField = value;
            }
        }
        
        /// <remarks/>
        public string PinNumber {
            get {
                return this.pinNumberField;
            }
            set {
                this.pinNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ControlNumber {
            get {
                return this.controlNumberField;
            }
            set {
                this.controlNumberField = value;
            }
        }
        
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string ProductSBT {
            get {
                return this.productSBTField;
            }
            set {
                this.productSBTField = value;
            }
        }
        
        /// <remarks/>
        public string Conn800English {
            get {
                return this.conn800EnglishField;
            }
            set {
                this.conn800EnglishField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerServiceEnglish {
            get {
                return this.customerServiceEnglishField;
            }
            set {
                this.customerServiceEnglishField = value;
            }
        }
        
        /// <remarks/>
        public object[] LocalAccessPhones {
            get {
                return this.localAccessPhonesField;
            }
            set {
                this.localAccessPhonesField = value;
            }
        }
        
        /// <remarks/>
        public string ItemFK {
            get {
                return this.itemFKField;
            }
            set {
                this.itemFKField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionMode {
            get {
                return this.transactionModeField;
            }
            set {
                this.transactionModeField = value;
            }
        }
        
        /// <remarks/>
        public string ProductDescription {
            get {
                return this.productDescriptionField;
            }
            set {
                this.productDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Batch {
            get {
                return this.batchField;
            }
            set {
                this.batchField = value;
            }
        }
        
        /// <remarks/>
        public string ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public string ProductType {
            get {
                return this.productTypeField;
            }
            set {
                this.productTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Barcode {
            get {
                return this.barcodeField;
            }
            set {
                this.barcodeField = value;
            }
        }
        
        /// <remarks/>
        public string Instructions {
            get {
                return this.instructionsField;
            }
            set {
                this.instructionsField = value;
            }
        }
        
        /// <remarks/>
        public string PrinterDisclaimer {
            get {
                return this.printerDisclaimerField;
            }
            set {
                this.printerDisclaimerField = value;
            }
        }
        
        /// <remarks/>
        public string ToppedUpNumber {
            get {
                return this.toppedUpNumberField;
            }
            set {
                this.toppedUpNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AccountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                this.accountNumberField = value;
            }
        }
        
        /// <remarks/>
        public Legal LegalInfo {
            get {
                return this.legalInfoField;
            }
            set {
                this.legalInfoField = value;
            }
        }
        
        /// <remarks/>
        public double ForeignAmount {
            get {
                return this.foreignAmountField;
            }
            set {
                this.foreignAmountField = value;
            }
        }
        
        /// <remarks/>
        public double ForeignMoneyLeft {
            get {
                return this.foreignMoneyLeftField;
            }
            set {
                this.foreignMoneyLeftField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizationCode {
            get {
                return this.authorizationCodeField;
            }
            set {
                this.authorizationCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CurrencyCode {
            get {
                return this.currencyCodeField;
            }
            set {
                this.currencyCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DocumentPaymentResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DocumentInquiryResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReplenishmentResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BalanceResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Response", Namespace="http://tempuri.org/")]
    public partial class Response1 {
        
        private System.DateTime timestampField;
        
        private int responseCodeField;
        
        private string responseDescriptionField;
        
        private long referenceNumberField;
        
        /// <remarks/>
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public long ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DocumentPaymentResponse : Response1 {
        
        private Document[] paidDocumentListField;
        
        private double updatedBalanceField;
        
        /// <remarks/>
        public Document[] PaidDocumentList {
            get {
                return this.paidDocumentListField;
            }
            set {
                this.paidDocumentListField = value;
            }
        }
        
        /// <remarks/>
        public double UpdatedBalance {
            get {
                return this.updatedBalanceField;
            }
            set {
                this.updatedBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Document {
        
        private string documentIdField;
        
        private double documentPaymentAmountField;
        
        /// <remarks/>
        public string DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public double DocumentPaymentAmount {
            get {
                return this.documentPaymentAmountField;
            }
            set {
                this.documentPaymentAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class DocumentInquiryResponse : Response1 {
        
        private string purchaseIdField;
        
        private Document requestedDocumentField;
        
        private Document[] unpaidDocumentListField;
        
        private double unpaidDocumentListAmountField;
        
        private string responseMessageField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public Document RequestedDocument {
            get {
                return this.requestedDocumentField;
            }
            set {
                this.requestedDocumentField = value;
            }
        }
        
        /// <remarks/>
        public Document[] UnpaidDocumentList {
            get {
                return this.unpaidDocumentListField;
            }
            set {
                this.unpaidDocumentListField = value;
            }
        }
        
        /// <remarks/>
        public double UnpaidDocumentListAmount {
            get {
                return this.unpaidDocumentListAmountField;
            }
            set {
                this.unpaidDocumentListAmountField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseMessage {
            get {
                return this.responseMessageField;
            }
            set {
                this.responseMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ReplenishmentResponse : Response1 {
        
        private string updatedBalanceField;
        
        /// <remarks/>
        public string UpdatedBalance {
            get {
                return this.updatedBalanceField;
            }
            set {
                this.updatedBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BalanceResponse : Response1 {
        
        private string purchaseIdField;
        
        private double currentBalanceField;
        
        private double minimumReplenishmentAmountField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public double CurrentBalance {
            get {
                return this.currentBalanceField;
            }
            set {
                this.currentBalanceField = value;
            }
        }
        
        /// <remarks/>
        public double MinimumReplenishmentAmount {
            get {
                return this.minimumReplenishmentAmountField;
            }
            set {
                this.minimumReplenishmentAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FTDocumentPaymentResponse1))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FTBalanceResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FTOneTimeTollInquiryResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FTOneTimeTollPaymentResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FTReplenishmentResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FTDocumentInquiryResponse1))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FTResponse {
        
        private System.DateTime timestampField;
        
        private int responseCodeField;
        
        private string responseDescriptionField;
        
        private long referenceNumberField;
        
        /// <remarks/>
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public long ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FTDocumentPaymentResponse", Namespace="http://tempuri.org/")]
    public partial class FTDocumentPaymentResponse1 : FTResponse {
        
        private FTDocument[] paidDocumentListField;
        
        private double updatedBalanceField;
        
        /// <remarks/>
        public FTDocument[] PaidDocumentList {
            get {
                return this.paidDocumentListField;
            }
            set {
                this.paidDocumentListField = value;
            }
        }
        
        /// <remarks/>
        public double UpdatedBalance {
            get {
                return this.updatedBalanceField;
            }
            set {
                this.updatedBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FTDocument {
        
        private string documentIdField;
        
        private double documentPaymentAmountField;
        
        /// <remarks/>
        public string DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public double DocumentPaymentAmount {
            get {
                return this.documentPaymentAmountField;
            }
            set {
                this.documentPaymentAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FTBalanceResponse : FTResponse {
        
        private string purchaseIdField;
        
        private double currentBalanceField;
        
        private double minimumReplenishmentAmountField;
        
        private string firstNameField;
        
        private string middleNameField;
        
        private string lastNameField;
        
        private string addressLine1Field;
        
        private string addressLine2Field;
        
        private string cityField;
        
        private string stateField;
        
        private string countryField;
        
        private string zipField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public double CurrentBalance {
            get {
                return this.currentBalanceField;
            }
            set {
                this.currentBalanceField = value;
            }
        }
        
        /// <remarks/>
        public double MinimumReplenishmentAmount {
            get {
                return this.minimumReplenishmentAmountField;
            }
            set {
                this.minimumReplenishmentAmountField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string MiddleName {
            get {
                return this.middleNameField;
            }
            set {
                this.middleNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string AddressLine1 {
            get {
                return this.addressLine1Field;
            }
            set {
                this.addressLine1Field = value;
            }
        }
        
        /// <remarks/>
        public string AddressLine2 {
            get {
                return this.addressLine2Field;
            }
            set {
                this.addressLine2Field = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string Zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FTOneTimeTollInquiryResponse : FTResponse {
        
        private string purchaseIdField;
        
        private double amountToBeChargedField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public double AmountToBeCharged {
            get {
                return this.amountToBeChargedField;
            }
            set {
                this.amountToBeChargedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FTOneTimeTollPaymentResponse : FTResponse {
        
        private string purchaseIdField;
        
        private string processedDateTimeField;
        
        private string requestDateTimeField;
        
        private string receivedAmountField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public string ProcessedDateTime {
            get {
                return this.processedDateTimeField;
            }
            set {
                this.processedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string RequestDateTime {
            get {
                return this.requestDateTimeField;
            }
            set {
                this.requestDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string ReceivedAmount {
            get {
                return this.receivedAmountField;
            }
            set {
                this.receivedAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FTReplenishmentResponse : FTResponse {
        
        private string updatedBalanceField;
        
        /// <remarks/>
        public string UpdatedBalance {
            get {
                return this.updatedBalanceField;
            }
            set {
                this.updatedBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FTDocumentInquiryResponse", Namespace="http://tempuri.org/")]
    public partial class FTDocumentInquiryResponse1 : FTResponse {
        
        private string purchaseIdField;
        
        private FTDocument requestedDocumentField;
        
        private FTDocument[] unpaidDocumentListField;
        
        private double unpaidDocumentListAmountField;
        
        private string responseMessageField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public FTDocument RequestedDocument {
            get {
                return this.requestedDocumentField;
            }
            set {
                this.requestedDocumentField = value;
            }
        }
        
        /// <remarks/>
        public FTDocument[] UnpaidDocumentList {
            get {
                return this.unpaidDocumentListField;
            }
            set {
                this.unpaidDocumentListField = value;
            }
        }
        
        /// <remarks/>
        public double UnpaidDocumentListAmount {
            get {
                return this.unpaidDocumentListAmountField;
            }
            set {
                this.unpaidDocumentListAmountField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseMessage {
            get {
                return this.responseMessageField;
            }
            set {
                this.responseMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class PinCreditResponse {
        
        private string errorCodeField;
        
        private string errorMessageField;
        
        private string creditStatusField;
        
        private string creditStatusDescriptionField;
        
        /// <remarks/>
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public string CreditStatus {
            get {
                return this.creditStatusField;
            }
            set {
                this.creditStatusField = value;
            }
        }
        
        /// <remarks/>
        public string CreditStatusDescription {
            get {
                return this.creditStatusDescriptionField;
            }
            set {
                this.creditStatusDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class CreditResponse {
        
        private int responseCodeField;
        
        private string responseDescriptionField;
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class MerchantBalance {
        
        private string errorCodeField;
        
        private string errorMessageField;
        
        private string balanceField;
        
        private string runningAchBalanceField;
        
        private string nextAchDateField;
        
        private string additionalInfoField;
        
        /// <remarks/>
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public string Balance {
            get {
                return this.balanceField;
            }
            set {
                this.balanceField = value;
            }
        }
        
        /// <remarks/>
        public string RunningAchBalance {
            get {
                return this.runningAchBalanceField;
            }
            set {
                this.runningAchBalanceField = value;
            }
        }
        
        /// <remarks/>
        public string NextAchDate {
            get {
                return this.nextAchDateField;
            }
            set {
                this.nextAchDateField = value;
            }
        }
        
        /// <remarks/>
        public string AdditionalInfo {
            get {
                return this.additionalInfoField;
            }
            set {
                this.additionalInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class FTDocumentPaymentResponse {
        
        private System.DateTime timestampField;
        
        private int responseCodeField;
        
        private string responseDescriptionField;
        
        private long referenceNumberField;
        
        private string updatedBalanceField;
        
        /// <remarks/>
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public long ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public string UpdatedBalance {
            get {
                return this.updatedBalanceField;
            }
            set {
                this.updatedBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class FTDocumentInquiryResponse {
        
        private System.DateTime timestampField;
        
        private int responseCodeField;
        
        private string responseDescriptionField;
        
        private long referenceNumberField;
        
        private string purchaseIdField;
        
        private double unpaidAmountField;
        
        /// <remarks/>
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public long ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public double UnpaidAmount {
            get {
                return this.unpaidAmountField;
            }
            set {
                this.unpaidAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class PaymentResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private string vendorIdField;
        
        private string paymentAmountField;
        
        private string feeAmountField;
        
        private string accountNumberField;
        
        private string altAccountNumberField;
        
        private string additAccountNumber1Field;
        
        private string additAccountNumber2Field;
        
        private string customerFirstNameField;
        
        private string customerLastNameField;
        
        private string trackingNumberField;
        
        private string batchNumberField;
        
        private string billerLoadUpdateFlagField;
        
        private string authorizationCodeField;
        
        private string returnMessageField;
        
        private string presentmentMessageField;
        
        private string postingDateMessageField;
        
        private string receiptMessageField;
        
        /// <remarks/>
        public long resultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string resultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string VendorId {
            get {
                return this.vendorIdField;
            }
            set {
                this.vendorIdField = value;
            }
        }
        
        /// <remarks/>
        public string PaymentAmount {
            get {
                return this.paymentAmountField;
            }
            set {
                this.paymentAmountField = value;
            }
        }
        
        /// <remarks/>
        public string FeeAmount {
            get {
                return this.feeAmountField;
            }
            set {
                this.feeAmountField = value;
            }
        }
        
        /// <remarks/>
        public string AccountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                this.accountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AltAccountNumber {
            get {
                return this.altAccountNumberField;
            }
            set {
                this.altAccountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AdditAccountNumber1 {
            get {
                return this.additAccountNumber1Field;
            }
            set {
                this.additAccountNumber1Field = value;
            }
        }
        
        /// <remarks/>
        public string AdditAccountNumber2 {
            get {
                return this.additAccountNumber2Field;
            }
            set {
                this.additAccountNumber2Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomerFirstName {
            get {
                return this.customerFirstNameField;
            }
            set {
                this.customerFirstNameField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerLastName {
            get {
                return this.customerLastNameField;
            }
            set {
                this.customerLastNameField = value;
            }
        }
        
        /// <remarks/>
        public string TrackingNumber {
            get {
                return this.trackingNumberField;
            }
            set {
                this.trackingNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BatchNumber {
            get {
                return this.batchNumberField;
            }
            set {
                this.batchNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BillerLoadUpdateFlag {
            get {
                return this.billerLoadUpdateFlagField;
            }
            set {
                this.billerLoadUpdateFlagField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizationCode {
            get {
                return this.authorizationCodeField;
            }
            set {
                this.authorizationCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReturnMessage {
            get {
                return this.returnMessageField;
            }
            set {
                this.returnMessageField = value;
            }
        }
        
        /// <remarks/>
        public string PresentmentMessage {
            get {
                return this.presentmentMessageField;
            }
            set {
                this.presentmentMessageField = value;
            }
        }
        
        /// <remarks/>
        public string PostingDateMessage {
            get {
                return this.postingDateMessageField;
            }
            set {
                this.postingDateMessageField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiptMessage {
            get {
                return this.receiptMessageField;
            }
            set {
                this.receiptMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductLocalPhonesResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private ProductAccessPhone[] accessPhonesField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public ProductAccessPhone[] AccessPhones {
            get {
                return this.accessPhonesField;
            }
            set {
                this.accessPhonesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductAccessPhone {
        
        private string stateField;
        
        private string cityField;
        
        private string languageField;
        
        private string phoneNumberField;
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductRate {
        
        private string countryField;
        
        private double localRateField;
        
        private double tollFreeRateField;
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public double LocalRate {
            get {
                return this.localRateField;
            }
            set {
                this.localRateField = value;
            }
        }
        
        /// <remarks/>
        public double TollFreeRate {
            get {
                return this.tollFreeRateField;
            }
            set {
                this.tollFreeRateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductRatesResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private ProductRate[] ratesField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public ProductRate[] Rates {
            get {
                return this.ratesField;
            }
            set {
                this.ratesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductListVersionResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private string productListVersionField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ProductListVersion {
            get {
                return this.productListVersionField;
            }
            set {
                this.productListVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductFlags {
        
        private bool showRatesField;
        
        private bool showTermsAndConditionsField;
        
        private bool showInstructionsField;
        
        private bool showAccessPhonesField;
        
        /// <remarks/>
        public bool ShowRates {
            get {
                return this.showRatesField;
            }
            set {
                this.showRatesField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowTermsAndConditions {
            get {
                return this.showTermsAndConditionsField;
            }
            set {
                this.showTermsAndConditionsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowInstructions {
            get {
                return this.showInstructionsField;
            }
            set {
                this.showInstructionsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowAccessPhones {
            get {
                return this.showAccessPhonesField;
            }
            set {
                this.showAccessPhonesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductDenominationConfig {
        
        private double denominationField;
        
        private int additionalPhonesQuantityField;
        
        /// <remarks/>
        public double Denomination {
            get {
                return this.denominationField;
            }
            set {
                this.denominationField = value;
            }
        }
        
        /// <remarks/>
        public int AdditionalPhonesQuantity {
            get {
                return this.additionalPhonesQuantityField;
            }
            set {
                this.additionalPhonesQuantityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductListItem {
        
        private string codeField;
        
        private string nameField;
        
        private bool useFixedDenominationsField;
        
        private double minDenominationField;
        
        private double maxDenominationField;
        
        private double feeAmountField;
        
        private string carrierNameField;
        
        private string countryCodeField;
        
        private string countryNameField;
        
        private string typeField;
        
        private string imageUrlField;
        
        private string dialCountryCodeField;
        
        private string termsAndConditionsField;
        
        private string instructionsField;
        
        private double[] denominationsField;
        
        private ProductDenominationConfig[] denominationsConfigField;
        
        private ProductAccessPhone[] accessPhonesField;
        
        private ProductFlags flagsField;
        
        private int merchantBuyingFrequencyField;
        
        private int zipCodeBuyingFrequencyField;
        
        private bool acceptAdditionalPhonesField;
        
        private int additionalPhonesQuantityField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool UseFixedDenominations {
            get {
                return this.useFixedDenominationsField;
            }
            set {
                this.useFixedDenominationsField = value;
            }
        }
        
        /// <remarks/>
        public double MinDenomination {
            get {
                return this.minDenominationField;
            }
            set {
                this.minDenominationField = value;
            }
        }
        
        /// <remarks/>
        public double MaxDenomination {
            get {
                return this.maxDenominationField;
            }
            set {
                this.maxDenominationField = value;
            }
        }
        
        /// <remarks/>
        public double FeeAmount {
            get {
                return this.feeAmountField;
            }
            set {
                this.feeAmountField = value;
            }
        }
        
        /// <remarks/>
        public string CarrierName {
            get {
                return this.carrierNameField;
            }
            set {
                this.carrierNameField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryName {
            get {
                return this.countryNameField;
            }
            set {
                this.countryNameField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string ImageUrl {
            get {
                return this.imageUrlField;
            }
            set {
                this.imageUrlField = value;
            }
        }
        
        /// <remarks/>
        public string DialCountryCode {
            get {
                return this.dialCountryCodeField;
            }
            set {
                this.dialCountryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string TermsAndConditions {
            get {
                return this.termsAndConditionsField;
            }
            set {
                this.termsAndConditionsField = value;
            }
        }
        
        /// <remarks/>
        public string Instructions {
            get {
                return this.instructionsField;
            }
            set {
                this.instructionsField = value;
            }
        }
        
        /// <remarks/>
        public double[] Denominations {
            get {
                return this.denominationsField;
            }
            set {
                this.denominationsField = value;
            }
        }
        
        /// <remarks/>
        public ProductDenominationConfig[] DenominationsConfig {
            get {
                return this.denominationsConfigField;
            }
            set {
                this.denominationsConfigField = value;
            }
        }
        
        /// <remarks/>
        public ProductAccessPhone[] AccessPhones {
            get {
                return this.accessPhonesField;
            }
            set {
                this.accessPhonesField = value;
            }
        }
        
        /// <remarks/>
        public ProductFlags Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
        
        /// <remarks/>
        public int MerchantBuyingFrequency {
            get {
                return this.merchantBuyingFrequencyField;
            }
            set {
                this.merchantBuyingFrequencyField = value;
            }
        }
        
        /// <remarks/>
        public int ZipCodeBuyingFrequency {
            get {
                return this.zipCodeBuyingFrequencyField;
            }
            set {
                this.zipCodeBuyingFrequencyField = value;
            }
        }
        
        /// <remarks/>
        public bool AcceptAdditionalPhones {
            get {
                return this.acceptAdditionalPhonesField;
            }
            set {
                this.acceptAdditionalPhonesField = value;
            }
        }
        
        /// <remarks/>
        public int AdditionalPhonesQuantity {
            get {
                return this.additionalPhonesQuantityField;
            }
            set {
                this.additionalPhonesQuantityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ProductListResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private string productListVersionField;
        
        private ProductListItem[] productsField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ProductListVersion {
            get {
                return this.productListVersionField;
            }
            set {
                this.productListVersionField = value;
            }
        }
        
        /// <remarks/>
        public ProductListItem[] Products {
            get {
                return this.productsField;
            }
            set {
                this.productsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class PaymentOption {
        
        private string paymentTypeField;
        
        private double feeAmountField;
        
        /// <remarks/>
        public string PaymentType {
            get {
                return this.paymentTypeField;
            }
            set {
                this.paymentTypeField = value;
            }
        }
        
        /// <remarks/>
        public double FeeAmount {
            get {
                return this.feeAmountField;
            }
            set {
                this.feeAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class MasterBillerPaymentOptionsResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private BillerLoadRecord billerDataField;
        
        private PaymentOption[] paymentOptionsField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public BillerLoadRecord BillerData {
            get {
                return this.billerDataField;
            }
            set {
                this.billerDataField = value;
            }
        }
        
        /// <remarks/>
        public PaymentOption[] PaymentOptions {
            get {
                return this.paymentOptionsField;
            }
            set {
                this.paymentOptionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PaymentOptionOld))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class BillerLoadRecord {
        
        private string vendorIDField;
        
        private string vendorNameField;
        
        private string vendorAccountLengthMinField;
        
        private string vendorAccountLengthMaxField;
        
        private string vendorTranAmtMinField;
        
        private string vendorTranAmtMaxField;
        
        private string custNameRequiredField;
        
        private string senderNameRequiredField;
        
        private string senderRequiredAmtMinField;
        
        private string maskAcctOnReceiptField;
        
        private string postingTimeDescField;
        
        private string postingTimeCutoffField;
        
        private string vendorRemitTimingField;
        
        private string presentmentFlagField;
        
        private string formFlagField;
        
        private BillerLoadFormDetails formDetailsField;
        
        /// <remarks/>
        public string VendorID {
            get {
                return this.vendorIDField;
            }
            set {
                this.vendorIDField = value;
            }
        }
        
        /// <remarks/>
        public string VendorName {
            get {
                return this.vendorNameField;
            }
            set {
                this.vendorNameField = value;
            }
        }
        
        /// <remarks/>
        public string VendorAccountLengthMin {
            get {
                return this.vendorAccountLengthMinField;
            }
            set {
                this.vendorAccountLengthMinField = value;
            }
        }
        
        /// <remarks/>
        public string VendorAccountLengthMax {
            get {
                return this.vendorAccountLengthMaxField;
            }
            set {
                this.vendorAccountLengthMaxField = value;
            }
        }
        
        /// <remarks/>
        public string VendorTranAmtMin {
            get {
                return this.vendorTranAmtMinField;
            }
            set {
                this.vendorTranAmtMinField = value;
            }
        }
        
        /// <remarks/>
        public string VendorTranAmtMax {
            get {
                return this.vendorTranAmtMaxField;
            }
            set {
                this.vendorTranAmtMaxField = value;
            }
        }
        
        /// <remarks/>
        public string CustNameRequired {
            get {
                return this.custNameRequiredField;
            }
            set {
                this.custNameRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string SenderNameRequired {
            get {
                return this.senderNameRequiredField;
            }
            set {
                this.senderNameRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string SenderRequiredAmtMin {
            get {
                return this.senderRequiredAmtMinField;
            }
            set {
                this.senderRequiredAmtMinField = value;
            }
        }
        
        /// <remarks/>
        public string MaskAcctOnReceipt {
            get {
                return this.maskAcctOnReceiptField;
            }
            set {
                this.maskAcctOnReceiptField = value;
            }
        }
        
        /// <remarks/>
        public string PostingTimeDesc {
            get {
                return this.postingTimeDescField;
            }
            set {
                this.postingTimeDescField = value;
            }
        }
        
        /// <remarks/>
        public string PostingTimeCutoff {
            get {
                return this.postingTimeCutoffField;
            }
            set {
                this.postingTimeCutoffField = value;
            }
        }
        
        /// <remarks/>
        public string VendorRemitTiming {
            get {
                return this.vendorRemitTimingField;
            }
            set {
                this.vendorRemitTimingField = value;
            }
        }
        
        /// <remarks/>
        public string PresentmentFlag {
            get {
                return this.presentmentFlagField;
            }
            set {
                this.presentmentFlagField = value;
            }
        }
        
        /// <remarks/>
        public string FormFlag {
            get {
                return this.formFlagField;
            }
            set {
                this.formFlagField = value;
            }
        }
        
        /// <remarks/>
        public BillerLoadFormDetails FormDetails {
            get {
                return this.formDetailsField;
            }
            set {
                this.formDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class BillerLoadFormDetails {
        
        private string altLookupLabelField;
        
        private string altLookupVisibleLenField;
        
        private string altLookupMaxLenField;
        
        private string addInfoLabel1Field;
        
        private string addInfoReqFlag1Field;
        
        private string addInfoVisibleLen1Field;
        
        private string addInfoMaxLen1Field;
        
        private string addInfoLabel2Field;
        
        private string addInfoReqFlag2Field;
        
        private string addInfoVisibleLen2Field;
        
        private string addInfoMaxLen2Field;
        
        /// <remarks/>
        public string AltLookupLabel {
            get {
                return this.altLookupLabelField;
            }
            set {
                this.altLookupLabelField = value;
            }
        }
        
        /// <remarks/>
        public string AltLookupVisibleLen {
            get {
                return this.altLookupVisibleLenField;
            }
            set {
                this.altLookupVisibleLenField = value;
            }
        }
        
        /// <remarks/>
        public string AltLookupMaxLen {
            get {
                return this.altLookupMaxLenField;
            }
            set {
                this.altLookupMaxLenField = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoLabel1 {
            get {
                return this.addInfoLabel1Field;
            }
            set {
                this.addInfoLabel1Field = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoReqFlag1 {
            get {
                return this.addInfoReqFlag1Field;
            }
            set {
                this.addInfoReqFlag1Field = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoVisibleLen1 {
            get {
                return this.addInfoVisibleLen1Field;
            }
            set {
                this.addInfoVisibleLen1Field = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoMaxLen1 {
            get {
                return this.addInfoMaxLen1Field;
            }
            set {
                this.addInfoMaxLen1Field = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoLabel2 {
            get {
                return this.addInfoLabel2Field;
            }
            set {
                this.addInfoLabel2Field = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoReqFlag2 {
            get {
                return this.addInfoReqFlag2Field;
            }
            set {
                this.addInfoReqFlag2Field = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoVisibleLen2 {
            get {
                return this.addInfoVisibleLen2Field;
            }
            set {
                this.addInfoVisibleLen2Field = value;
            }
        }
        
        /// <remarks/>
        public string AddInfoMaxLen2 {
            get {
                return this.addInfoMaxLen2Field;
            }
            set {
                this.addInfoMaxLen2Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class PaymentOptionOld : BillerLoadRecord {
        
        private string paymentTypeField;
        
        private double feeAmountField;
        
        /// <remarks/>
        public string PaymentType {
            get {
                return this.paymentTypeField;
            }
            set {
                this.paymentTypeField = value;
            }
        }
        
        /// <remarks/>
        public double FeeAmount {
            get {
                return this.feeAmountField;
            }
            set {
                this.feeAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class MasterBiller {
        
        private string idField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class MasterBillersByCategoryResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private MasterBiller[] masterBillersField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public MasterBiller[] MasterBillers {
            get {
                return this.masterBillersField;
            }
            set {
                this.masterBillersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Category {
        
        private string idField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class BillerCategoriesResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private Category[] categoriesField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class BillPaymentResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private string vendorIdField;
        
        private string paymentAmountField;
        
        private string feeAmountField;
        
        private string accountNumberField;
        
        private string altAccountNumberField;
        
        private string additAccountNumber1Field;
        
        private string additAccountNumber2Field;
        
        private string customerFirstNameField;
        
        private string customerLastNameField;
        
        private string trackingNumberField;
        
        private string batchNumberField;
        
        private string authorizationCodeField;
        
        private string returnMessageField;
        
        private string presentmentMessageField;
        
        private string postingDateMessageField;
        
        private string receiptMessageField;
        
        /// <remarks/>
        public long resultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string resultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string VendorId {
            get {
                return this.vendorIdField;
            }
            set {
                this.vendorIdField = value;
            }
        }
        
        /// <remarks/>
        public string PaymentAmount {
            get {
                return this.paymentAmountField;
            }
            set {
                this.paymentAmountField = value;
            }
        }
        
        /// <remarks/>
        public string FeeAmount {
            get {
                return this.feeAmountField;
            }
            set {
                this.feeAmountField = value;
            }
        }
        
        /// <remarks/>
        public string AccountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                this.accountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AltAccountNumber {
            get {
                return this.altAccountNumberField;
            }
            set {
                this.altAccountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AdditAccountNumber1 {
            get {
                return this.additAccountNumber1Field;
            }
            set {
                this.additAccountNumber1Field = value;
            }
        }
        
        /// <remarks/>
        public string AdditAccountNumber2 {
            get {
                return this.additAccountNumber2Field;
            }
            set {
                this.additAccountNumber2Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomerFirstName {
            get {
                return this.customerFirstNameField;
            }
            set {
                this.customerFirstNameField = value;
            }
        }
        
        /// <remarks/>
        public string CustomerLastName {
            get {
                return this.customerLastNameField;
            }
            set {
                this.customerLastNameField = value;
            }
        }
        
        /// <remarks/>
        public string TrackingNumber {
            get {
                return this.trackingNumberField;
            }
            set {
                this.trackingNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BatchNumber {
            get {
                return this.batchNumberField;
            }
            set {
                this.batchNumberField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizationCode {
            get {
                return this.authorizationCodeField;
            }
            set {
                this.authorizationCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ReturnMessage {
            get {
                return this.returnMessageField;
            }
            set {
                this.returnMessageField = value;
            }
        }
        
        /// <remarks/>
        public string PresentmentMessage {
            get {
                return this.presentmentMessageField;
            }
            set {
                this.presentmentMessageField = value;
            }
        }
        
        /// <remarks/>
        public string PostingDateMessage {
            get {
                return this.postingDateMessageField;
            }
            set {
                this.postingDateMessageField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiptMessage {
            get {
                return this.receiptMessageField;
            }
            set {
                this.receiptMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class BillPaymentReconciliationDetailItem {
        
        private string trackingNumberField;
        
        private string referenceNumberField;
        
        private double paymentAmountField;
        
        private double feeShareField;
        
        /// <remarks/>
        public string TrackingNumber {
            get {
                return this.trackingNumberField;
            }
            set {
                this.trackingNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public double PaymentAmount {
            get {
                return this.paymentAmountField;
            }
            set {
                this.paymentAmountField = value;
            }
        }
        
        /// <remarks/>
        public double FeeShare {
            get {
                return this.feeShareField;
            }
            set {
                this.feeShareField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class BillPaymentReconciliationResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private string batchDateField;
        
        private string batchNumberField;
        
        private int totalRecordsField;
        
        private double totalPaymentAmountField;
        
        private double totalFeeAmountField;
        
        private string terminalNumberField;
        
        private BillPaymentReconciliationDetailItem[] reconciliationDetailField;
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string BatchDate {
            get {
                return this.batchDateField;
            }
            set {
                this.batchDateField = value;
            }
        }
        
        /// <remarks/>
        public string BatchNumber {
            get {
                return this.batchNumberField;
            }
            set {
                this.batchNumberField = value;
            }
        }
        
        /// <remarks/>
        public int TotalRecords {
            get {
                return this.totalRecordsField;
            }
            set {
                this.totalRecordsField = value;
            }
        }
        
        /// <remarks/>
        public double TotalPaymentAmount {
            get {
                return this.totalPaymentAmountField;
            }
            set {
                this.totalPaymentAmountField = value;
            }
        }
        
        /// <remarks/>
        public double TotalFeeAmount {
            get {
                return this.totalFeeAmountField;
            }
            set {
                this.totalFeeAmountField = value;
            }
        }
        
        /// <remarks/>
        public string TerminalNumber {
            get {
                return this.terminalNumberField;
            }
            set {
                this.terminalNumberField = value;
            }
        }
        
        /// <remarks/>
        public BillPaymentReconciliationDetailItem[] ReconciliationDetail {
            get {
                return this.reconciliationDetailField;
            }
            set {
                this.reconciliationDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class AdditionalPhone {
        
        private string phoneNumberField;
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class AdditionalPhonesData {
        
        private AdditionalPhone[] additionalPhonesField;
        
        /// <remarks/>
        public AdditionalPhone[] AdditionalPhones {
            get {
                return this.additionalPhonesField;
            }
            set {
                this.additionalPhonesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class AccessPhone {
        
        private string stateField;
        
        private string cityField;
        
        private string phoneField;
        
        private string accessLanguageField;
        
        private string accessTypeField;
        
        private string areaCodeField;
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string AccessLanguage {
            get {
                return this.accessLanguageField;
            }
            set {
                this.accessLanguageField = value;
            }
        }
        
        /// <remarks/>
        public string AccessType {
            get {
                return this.accessTypeField;
            }
            set {
                this.accessTypeField = value;
            }
        }
        
        /// <remarks/>
        public string AreaCode {
            get {
                return this.areaCodeField;
            }
            set {
                this.areaCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ReconciliationDetail {
        
        private string trackingNumberField;
        
        private string referenceNumberField;
        
        private double paymentAmountField;
        
        private double feeShareField;
        
        /// <remarks/>
        public string TrackingNumber {
            get {
                return this.trackingNumberField;
            }
            set {
                this.trackingNumberField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public double PaymentAmount {
            get {
                return this.paymentAmountField;
            }
            set {
                this.paymentAmountField = value;
            }
        }
        
        /// <remarks/>
        public double FeeShare {
            get {
                return this.feeShareField;
            }
            set {
                this.feeShareField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ReconciliationResponse {
        
        private long resultIdField;
        
        private string resultDescriptionField;
        
        private string terminalNumberField;
        
        private string batchDateField;
        
        private string batchNumberField;
        
        private int totalRecordsField;
        
        private double totalPaymentAmountField;
        
        private double totalFeeAmountField;
        
        private int recordsInDetailField;
        
        private object[] reconciliationDetailField;
        
        /// <remarks/>
        public long resultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public string resultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string TerminalNumber {
            get {
                return this.terminalNumberField;
            }
            set {
                this.terminalNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BatchDate {
            get {
                return this.batchDateField;
            }
            set {
                this.batchDateField = value;
            }
        }
        
        /// <remarks/>
        public string BatchNumber {
            get {
                return this.batchNumberField;
            }
            set {
                this.batchNumberField = value;
            }
        }
        
        /// <remarks/>
        public int TotalRecords {
            get {
                return this.totalRecordsField;
            }
            set {
                this.totalRecordsField = value;
            }
        }
        
        /// <remarks/>
        public double TotalPaymentAmount {
            get {
                return this.totalPaymentAmountField;
            }
            set {
                this.totalPaymentAmountField = value;
            }
        }
        
        /// <remarks/>
        public double TotalFeeAmount {
            get {
                return this.totalFeeAmountField;
            }
            set {
                this.totalFeeAmountField = value;
            }
        }
        
        /// <remarks/>
        public int RecordsInDetail {
            get {
                return this.recordsInDetailField;
            }
            set {
                this.recordsInDetailField = value;
            }
        }
        
        /// <remarks/>
        public object[] ReconciliationDetail {
            get {
                return this.reconciliationDetailField;
            }
            set {
                this.reconciliationDetailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TCABalanceResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TCAReplenishmentResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TCADocumentInquiryResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TCADocumentPaymentResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class TCAResponse {
        
        private System.DateTime timestampField;
        
        private int responseCodeField;
        
        private string responseDescriptionField;
        
        private long referenceNumberField;
        
        /// <remarks/>
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        public int ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public long ReferenceNumber {
            get {
                return this.referenceNumberField;
            }
            set {
                this.referenceNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class TCABalanceResponse : TCAResponse {
        
        private string purchaseIdField;
        
        private string accountIdField;
        
        private double currentBalanceField;
        
        private double minimumReplenishmentAmountField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public string AccountId {
            get {
                return this.accountIdField;
            }
            set {
                this.accountIdField = value;
            }
        }
        
        /// <remarks/>
        public double CurrentBalance {
            get {
                return this.currentBalanceField;
            }
            set {
                this.currentBalanceField = value;
            }
        }
        
        /// <remarks/>
        public double MinimumReplenishmentAmount {
            get {
                return this.minimumReplenishmentAmountField;
            }
            set {
                this.minimumReplenishmentAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class TCAReplenishmentResponse : TCAResponse {
        
        private string updatedBalanceField;
        
        /// <remarks/>
        public string UpdatedBalance {
            get {
                return this.updatedBalanceField;
            }
            set {
                this.updatedBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class TCADocumentInquiryResponse : TCAResponse {
        
        private string purchaseIdField;
        
        private TCADocument requestedDocumentField;
        
        private TCADocument[] unpaidDocumentListField;
        
        private double unpaidDocumentListAmountField;
        
        private string responseMessageField;
        
        /// <remarks/>
        public string PurchaseId {
            get {
                return this.purchaseIdField;
            }
            set {
                this.purchaseIdField = value;
            }
        }
        
        /// <remarks/>
        public TCADocument RequestedDocument {
            get {
                return this.requestedDocumentField;
            }
            set {
                this.requestedDocumentField = value;
            }
        }
        
        /// <remarks/>
        public TCADocument[] UnpaidDocumentList {
            get {
                return this.unpaidDocumentListField;
            }
            set {
                this.unpaidDocumentListField = value;
            }
        }
        
        /// <remarks/>
        public double UnpaidDocumentListAmount {
            get {
                return this.unpaidDocumentListAmountField;
            }
            set {
                this.unpaidDocumentListAmountField = value;
            }
        }
        
        /// <remarks/>
        public string ResponseMessage {
            get {
                return this.responseMessageField;
            }
            set {
                this.responseMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class TCADocument {
        
        private string documentIdField;
        
        private string documentDateField;
        
        private string documentDescriptionField;
        
        private double documentPaymentAmountField;
        
        private string documentPaymentDateField;
        
        /// <remarks/>
        public string DocumentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentDate {
            get {
                return this.documentDateField;
            }
            set {
                this.documentDateField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentDescription {
            get {
                return this.documentDescriptionField;
            }
            set {
                this.documentDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public double DocumentPaymentAmount {
            get {
                return this.documentPaymentAmountField;
            }
            set {
                this.documentPaymentAmountField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentPaymentDate {
            get {
                return this.documentPaymentDateField;
            }
            set {
                this.documentPaymentDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class TCADocumentPaymentResponse : TCAResponse {
        
        private TCADocument[] paidDocumentListField;
        
        private double updatedBalanceField;
        
        /// <remarks/>
        public TCADocument[] PaidDocumentList {
            get {
                return this.paidDocumentListField;
            }
            set {
                this.paidDocumentListField = value;
            }
        }
        
        /// <remarks/>
        public double UpdatedBalance {
            get {
                return this.updatedBalanceField;
            }
            set {
                this.updatedBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Response {
        
        private enStatus statusField;
        
        private object responseDescriptionField;
        
        private decimal balanceField;
        
        /// <remarks/>
        public enStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public object ResponseDescription {
            get {
                return this.responseDescriptionField;
            }
            set {
                this.responseDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public decimal Balance {
            get {
                return this.balanceField;
            }
            set {
                this.balanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public enum enStatus {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        Fail,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class CallDetail {
        
        private string phoneField;
        
        private System.DateTime answerTimeField;
        
        private decimal callRecIdField;
        
        private string cldNumField;
        
        private string clgNumField;
        
        private System.DateTime connectTimeField;
        
        private string dialedNumField;
        
        private System.DateTime disconnectTimeField;
        
        private string destinationField;
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime AnswerTime {
            get {
                return this.answerTimeField;
            }
            set {
                this.answerTimeField = value;
            }
        }
        
        /// <remarks/>
        public decimal CallRecId {
            get {
                return this.callRecIdField;
            }
            set {
                this.callRecIdField = value;
            }
        }
        
        /// <remarks/>
        public string CldNum {
            get {
                return this.cldNumField;
            }
            set {
                this.cldNumField = value;
            }
        }
        
        /// <remarks/>
        public string ClgNum {
            get {
                return this.clgNumField;
            }
            set {
                this.clgNumField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ConnectTime {
            get {
                return this.connectTimeField;
            }
            set {
                this.connectTimeField = value;
            }
        }
        
        /// <remarks/>
        public string DialedNum {
            get {
                return this.dialedNumField;
            }
            set {
                this.dialedNumField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DisconnectTime {
            get {
                return this.disconnectTimeField;
            }
            set {
                this.disconnectTimeField = value;
            }
        }
        
        /// <remarks/>
        public string Destination {
            get {
                return this.destinationField;
            }
            set {
                this.destinationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class DebitReason {
        
        private string nameField;
        
        private long reasonIdField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long reasonId {
            get {
                return this.reasonIdField;
            }
            set {
                this.reasonIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Report {
        
        private System.DateTime endDateField;
        
        private System.DateTime startDateField;
        
        private int totalPhonesField;
        
        private decimal totalBalanceField;
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public int TotalPhones {
            get {
                return this.totalPhonesField;
            }
            set {
                this.totalPhonesField = value;
            }
        }
        
        /// <remarks/>
        public decimal TotalBalance {
            get {
                return this.totalBalanceField;
            }
            set {
                this.totalBalanceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class ReportDetail {
        
        private string phoneField;
        
        private decimal balanceField;
        
        private System.DateTime creationDateField;
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public decimal Balance {
            get {
                return this.balanceField;
            }
            set {
                this.balanceField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Product {
        
        private string cardIDField;
        
        private string productMaincodeField;
        
        private string availableDenominationsField;
        
        private object[] denominationsField;
        
        private string productNameField;
        
        private string productTypeField;
        
        private string productTypeDescField;
        
        private string disclaimerField;
        
        private string disclaimerSpanishField;
        
        private string carrierField;
        
        private string recommendedUseField;
        
        private string searchableField;
        
        private string accessTypeField;
        
        private string accessTypeDescField;
        
        private string instructionsField;
        
        private string printerDisclaimerField;
        
        private string productBarcodeField;
        
        private string targetCountryField;
        
        private string countryCodeField;
        
        private decimal topUpMinAmountField;
        
        private decimal topUpMaxAmountField;
        
        /// <remarks/>
        public string CardID {
            get {
                return this.cardIDField;
            }
            set {
                this.cardIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProductMaincode {
            get {
                return this.productMaincodeField;
            }
            set {
                this.productMaincodeField = value;
            }
        }
        
        /// <remarks/>
        public string AvailableDenominations {
            get {
                return this.availableDenominationsField;
            }
            set {
                this.availableDenominationsField = value;
            }
        }
        
        /// <remarks/>
        public object[] Denominations {
            get {
                return this.denominationsField;
            }
            set {
                this.denominationsField = value;
            }
        }
        
        /// <remarks/>
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
            }
        }
        
        /// <remarks/>
        public string ProductType {
            get {
                return this.productTypeField;
            }
            set {
                this.productTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ProductTypeDesc {
            get {
                return this.productTypeDescField;
            }
            set {
                this.productTypeDescField = value;
            }
        }
        
        /// <remarks/>
        public string Disclaimer {
            get {
                return this.disclaimerField;
            }
            set {
                this.disclaimerField = value;
            }
        }
        
        /// <remarks/>
        public string DisclaimerSpanish {
            get {
                return this.disclaimerSpanishField;
            }
            set {
                this.disclaimerSpanishField = value;
            }
        }
        
        /// <remarks/>
        public string Carrier {
            get {
                return this.carrierField;
            }
            set {
                this.carrierField = value;
            }
        }
        
        /// <remarks/>
        public string RecommendedUse {
            get {
                return this.recommendedUseField;
            }
            set {
                this.recommendedUseField = value;
            }
        }
        
        /// <remarks/>
        public string Searchable {
            get {
                return this.searchableField;
            }
            set {
                this.searchableField = value;
            }
        }
        
        /// <remarks/>
        public string AccessType {
            get {
                return this.accessTypeField;
            }
            set {
                this.accessTypeField = value;
            }
        }
        
        /// <remarks/>
        public string AccessTypeDesc {
            get {
                return this.accessTypeDescField;
            }
            set {
                this.accessTypeDescField = value;
            }
        }
        
        /// <remarks/>
        public string Instructions {
            get {
                return this.instructionsField;
            }
            set {
                this.instructionsField = value;
            }
        }
        
        /// <remarks/>
        public string PrinterDisclaimer {
            get {
                return this.printerDisclaimerField;
            }
            set {
                this.printerDisclaimerField = value;
            }
        }
        
        /// <remarks/>
        public string ProductBarcode {
            get {
                return this.productBarcodeField;
            }
            set {
                this.productBarcodeField = value;
            }
        }
        
        /// <remarks/>
        public string TargetCountry {
            get {
                return this.targetCountryField;
            }
            set {
                this.targetCountryField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public decimal TopUpMinAmount {
            get {
                return this.topUpMinAmountField;
            }
            set {
                this.topUpMinAmountField = value;
            }
        }
        
        /// <remarks/>
        public decimal TopUpMaxAmount {
            get {
                return this.topUpMaxAmountField;
            }
            set {
                this.topUpMaxAmountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Catalog {
        
        private string errorCodeField;
        
        private string errorMessageField;
        
        private int profileIDField;
        
        private string profileNameField;
        
        private string profileDescriptionField;
        
        private string profileRegionField;
        
        private string profileStateField;
        
        private string profileTypeField;
        
        private string profileTypeDescField;
        
        private object[] productListField;
        
        /// <remarks/>
        public string ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public int ProfileID {
            get {
                return this.profileIDField;
            }
            set {
                this.profileIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProfileName {
            get {
                return this.profileNameField;
            }
            set {
                this.profileNameField = value;
            }
        }
        
        /// <remarks/>
        public string ProfileDescription {
            get {
                return this.profileDescriptionField;
            }
            set {
                this.profileDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string ProfileRegion {
            get {
                return this.profileRegionField;
            }
            set {
                this.profileRegionField = value;
            }
        }
        
        /// <remarks/>
        public string ProfileState {
            get {
                return this.profileStateField;
            }
            set {
                this.profileStateField = value;
            }
        }
        
        /// <remarks/>
        public string ProfileType {
            get {
                return this.profileTypeField;
            }
            set {
                this.profileTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ProfileTypeDesc {
            get {
                return this.profileTypeDescField;
            }
            set {
                this.profileTypeDescField = value;
            }
        }
        
        /// <remarks/>
        public object[] ProductList {
            get {
                return this.productListField;
            }
            set {
                this.productListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Denomination {
        
        private string denominationIDField;
        
        private string denominationCodeField;
        
        private string denominationValueField;
        
        private string denominationBarcodeField;
        
        /// <remarks/>
        public string DenominationID {
            get {
                return this.denominationIDField;
            }
            set {
                this.denominationIDField = value;
            }
        }
        
        /// <remarks/>
        public string DenominationCode {
            get {
                return this.denominationCodeField;
            }
            set {
                this.denominationCodeField = value;
            }
        }
        
        /// <remarks/>
        public string DenominationValue {
            get {
                return this.denominationValueField;
            }
            set {
                this.denominationValueField = value;
            }
        }
        
        /// <remarks/>
        public string DenominationBarcode {
            get {
                return this.denominationBarcodeField;
            }
            set {
                this.denominationBarcodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Destination {
        
        private string destinationIDField;
        
        private string countryNameField;
        
        private string cityNameField;
        
        private string countrySpanishField;
        
        private string citySpanishField;
        
        private string destinationTypeField;
        
        private string destinationTypeDescField;
        
        private string destinationTypeOrderField;
        
        /// <remarks/>
        public string DestinationID {
            get {
                return this.destinationIDField;
            }
            set {
                this.destinationIDField = value;
            }
        }
        
        /// <remarks/>
        public string CountryName {
            get {
                return this.countryNameField;
            }
            set {
                this.countryNameField = value;
            }
        }
        
        /// <remarks/>
        public string CityName {
            get {
                return this.cityNameField;
            }
            set {
                this.cityNameField = value;
            }
        }
        
        /// <remarks/>
        public string CountrySpanish {
            get {
                return this.countrySpanishField;
            }
            set {
                this.countrySpanishField = value;
            }
        }
        
        /// <remarks/>
        public string CitySpanish {
            get {
                return this.citySpanishField;
            }
            set {
                this.citySpanishField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationType {
            get {
                return this.destinationTypeField;
            }
            set {
                this.destinationTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationTypeDesc {
            get {
                return this.destinationTypeDescField;
            }
            set {
                this.destinationTypeDescField = value;
            }
        }
        
        /// <remarks/>
        public string DestinationTypeOrder {
            get {
                return this.destinationTypeOrderField;
            }
            set {
                this.destinationTypeOrderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://services.blackstoneonline.com/TransactionBroker/Broker")]
    public partial class Legal {
        
        private string versionField;
        
        private string copyrightField;
        
        private string disclaimerField;
        
        private string privacyURLField;
        
        private string termsAndConditionsField;
        
        private string contactPhoneField;
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Copyright {
            get {
                return this.copyrightField;
            }
            set {
                this.copyrightField = value;
            }
        }
        
        /// <remarks/>
        public string Disclaimer {
            get {
                return this.disclaimerField;
            }
            set {
                this.disclaimerField = value;
            }
        }
        
        /// <remarks/>
        public string PrivacyURL {
            get {
                return this.privacyURLField;
            }
            set {
                this.privacyURLField = value;
            }
        }
        
        /// <remarks/>
        public string TermsAndConditions {
            get {
                return this.termsAndConditionsField;
            }
            set {
                this.termsAndConditionsField = value;
            }
        }
        
        /// <remarks/>
        public string ContactPhone {
            get {
                return this.contactPhoneField;
            }
            set {
                this.contactPhoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum DocumentType {
        
        /// <remarks/>
        Invoice,
        
        /// <remarks/>
        Violation,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSinglePINCompletedEventHandler(object sender, GetSinglePINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSinglePINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSinglePINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSinglePINSerialCompletedEventHandler(object sender, GetSinglePINSerialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSinglePINSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSinglePINSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetMultiplePINCompletedEventHandler(object sender, GetMultiplePINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultiplePINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultiplePINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetMultiplePINLiteCompletedEventHandler(object sender, GetMultiplePINLiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultiplePINLiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultiplePINLiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void VoidOrderCompletedEventHandler(object sender, VoidOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTopUpCompletedEventHandler(object sender, DoTopUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTopUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTopUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTopUpWithAdditionalPhonesCompletedEventHandler(object sender, DoTopUpWithAdditionalPhonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTopUpWithAdditionalPhonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTopUpWithAdditionalPhonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTopUpFeeCompletedEventHandler(object sender, DoTopUpFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTopUpFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTopUpFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTopUpFeeWithAdditionalPhonesCompletedEventHandler(object sender, DoTopUpFeeWithAdditionalPhonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTopUpFeeWithAdditionalPhonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTopUpFeeWithAdditionalPhonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTopUpFeeSerialCompletedEventHandler(object sender, DoTopUpFeeSerialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTopUpFeeSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTopUpFeeSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTopUpFeeSerialWithAdditionalPhonesCompletedEventHandler(object sender, DoTopUpFeeSerialWithAdditionalPhonesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTopUpFeeSerialWithAdditionalPhonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTopUpFeeSerialWithAdditionalPhonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PIN Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PIN)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoDailyReconciliationCompletedEventHandler(object sender, DoDailyReconciliationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoDailyReconciliationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoDailyReconciliationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BillPaymentReconciliationResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BillPaymentReconciliationResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoBillPresentmentCompletedEventHandler(object sender, DoBillPresentmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoBillPresentmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoBillPresentmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BillPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BillPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoBillPaymentCompletedEventHandler(object sender, DoBillPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoBillPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoBillPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BillPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BillPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetBillerCategoriesCompletedEventHandler(object sender, GetBillerCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillerCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillerCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BillerCategoriesResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BillerCategoriesResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetMasterBillersByCategoryCompletedEventHandler(object sender, GetMasterBillersByCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterBillersByCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterBillersByCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MasterBillersByCategoryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MasterBillersByCategoryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetMasterBillerPaymentOptionsCompletedEventHandler(object sender, GetMasterBillerPaymentOptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterBillerPaymentOptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterBillerPaymentOptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MasterBillerPaymentOptionsResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MasterBillerPaymentOptionsResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetBillersCategoriesOldCompletedEventHandler(object sender, GetBillersCategoriesOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillersCategoriesOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillersCategoriesOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Category[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Category[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetMasterBillersByCategoryOldCompletedEventHandler(object sender, GetMasterBillersByCategoryOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterBillersByCategoryOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterBillersByCategoryOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MasterBiller[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MasterBiller[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetMasterBillerPaymentOptionsOldCompletedEventHandler(object sender, GetMasterBillerPaymentOptionsOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterBillerPaymentOptionsOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterBillerPaymentOptionsOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PaymentOptionOld[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PaymentOptionOld[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetSunPassBalanceCompletedEventHandler(object sender, GetSunPassBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSunPassBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSunPassBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BalanceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BalanceResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoSunPassReplenishmentCompletedEventHandler(object sender, DoSunPassReplenishmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSunPassReplenishmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSunPassReplenishmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoSunPassReplenishmentByStoreCompletedEventHandler(object sender, DoSunPassReplenishmentByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSunPassReplenishmentByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSunPassReplenishmentByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoSunPassDocumentInquiryCompletedEventHandler(object sender, DoSunPassDocumentInquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSunPassDocumentInquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSunPassDocumentInquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoSunPassDocumentInquiryByStoreCompletedEventHandler(object sender, DoSunPassDocumentInquiryByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSunPassDocumentInquiryByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSunPassDocumentInquiryByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoSunPassDocumentPaymentCompletedEventHandler(object sender, DoSunPassDocumentPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSunPassDocumentPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSunPassDocumentPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoSunPassDocumentPaymentByStoreCompletedEventHandler(object sender, DoSunPassDocumentPaymentByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoSunPassDocumentPaymentByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoSunPassDocumentPaymentByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DocumentPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DocumentPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductListCompletedEventHandler(object sender, GetProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductListResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductListResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductListByProductSbtCompletedEventHandler(object sender, GetProductListByProductSbtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListByProductSbtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListByProductSbtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductListResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductListResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductListByProductMainCodeCompletedEventHandler(object sender, GetProductListByProductMainCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListByProductMainCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListByProductMainCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductListResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductListResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductListVersionNumberCompletedEventHandler(object sender, GetProductListVersionNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductListVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductListVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductListVersionResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductListVersionResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductRatesCompletedEventHandler(object sender, GetProductRatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductRatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductRatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductRatesResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductRatesResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductLocalPhonesByMerchantIdCompletedEventHandler(object sender, GetProductLocalPhonesByMerchantIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductLocalPhonesByMerchantIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductLocalPhonesByMerchantIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProductLocalPhonesResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProductLocalPhonesResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoBillPaymentOldCompletedEventHandler(object sender, DoBillPaymentOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoBillPaymentOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoBillPaymentOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoBillPaymentOldSerialCompletedEventHandler(object sender, DoBillPaymentOldSerialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoBillPaymentOldSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoBillPaymentOldSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoBillPresentmentOldCompletedEventHandler(object sender, DoBillPresentmentOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoBillPresentmentOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoBillPresentmentOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoBillPresentmentOldSerialCompletedEventHandler(object sender, DoBillPresentmentOldSerialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoBillPresentmentOldSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoBillPresentmentOldSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoDailyReconciliationOldCompletedEventHandler(object sender, DoDailyReconciliationOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoDailyReconciliationOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoDailyReconciliationOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReconciliationResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReconciliationResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoDailyReconciliationOldSerialCompletedEventHandler(object sender, DoDailyReconciliationOldSerialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoDailyReconciliationOldSerialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoDailyReconciliationOldSerialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReconciliationResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReconciliationResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetTCATollsBalanceCompletedEventHandler(object sender, GetTCATollsBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTCATollsBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTCATollsBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TCABalanceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TCABalanceResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTCATollsReplenishmentCompletedEventHandler(object sender, DoTCATollsReplenishmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTCATollsReplenishmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTCATollsReplenishmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TCAReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TCAReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTCATollsReplenishmentByStoreCompletedEventHandler(object sender, DoTCATollsReplenishmentByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTCATollsReplenishmentByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTCATollsReplenishmentByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TCAReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TCAReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTCATollsDocumentInquiryCompletedEventHandler(object sender, DoTCATollsDocumentInquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTCATollsDocumentInquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTCATollsDocumentInquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TCADocumentInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TCADocumentInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTCATollsDocumentInquiryByStoreCompletedEventHandler(object sender, DoTCATollsDocumentInquiryByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTCATollsDocumentInquiryByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTCATollsDocumentInquiryByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TCADocumentInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TCADocumentInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTCATollsDocumentPaymentCompletedEventHandler(object sender, DoTCATollsDocumentPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTCATollsDocumentPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTCATollsDocumentPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TCADocumentPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TCADocumentPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoTCATollsDocumentPaymentByStoreCompletedEventHandler(object sender, DoTCATollsDocumentPaymentByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoTCATollsDocumentPaymentByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoTCATollsDocumentPaymentByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TCADocumentPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TCADocumentPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackGetAccountBalanceCompletedEventHandler(object sender, FastTrackGetAccountBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackGetAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackGetAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTBalanceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTBalanceResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackReplenishAccountCompletedEventHandler(object sender, FastTrackReplenishAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackReplenishAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackReplenishAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackReplenishAccountByStoreCompletedEventHandler(object sender, FastTrackReplenishAccountByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackReplenishAccountByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackReplenishAccountByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackGetLicensePlateAccountBalanceCompletedEventHandler(object sender, FastTrackGetLicensePlateAccountBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackGetLicensePlateAccountBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackGetLicensePlateAccountBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTBalanceResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTBalanceResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackReplenishLicensePlateAccountCompletedEventHandler(object sender, FastTrackReplenishLicensePlateAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackReplenishLicensePlateAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackReplenishLicensePlateAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackReplenishLicensePlateAccountByStoreCompletedEventHandler(object sender, FastTrackReplenishLicensePlateAccountByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackReplenishLicensePlateAccountByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackReplenishLicensePlateAccountByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTReplenishmentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTReplenishmentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackDocumentInquiryCompletedEventHandler(object sender, FastTrackDocumentInquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackDocumentInquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackDocumentInquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTDocumentInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTDocumentInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackDocumentPaymentCompletedEventHandler(object sender, FastTrackDocumentPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackDocumentPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackDocumentPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTDocumentPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTDocumentPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackDocumentInquiryByStoreCompletedEventHandler(object sender, FastTrackDocumentInquiryByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackDocumentInquiryByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackDocumentInquiryByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTDocumentInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTDocumentInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackDocumentPaymentByStoreCompletedEventHandler(object sender, FastTrackDocumentPaymentByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackDocumentPaymentByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackDocumentPaymentByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTDocumentPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTDocumentPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackOneTimeTollInquiryCompletedEventHandler(object sender, FastTrackOneTimeTollInquiryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackOneTimeTollInquiryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackOneTimeTollInquiryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTOneTimeTollInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTOneTimeTollInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackOneTimeTollPaymentCompletedEventHandler(object sender, FastTrackOneTimeTollPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackOneTimeTollPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackOneTimeTollPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTOneTimeTollPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTOneTimeTollPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackOneTimeTollInquiryByStoreCompletedEventHandler(object sender, FastTrackOneTimeTollInquiryByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackOneTimeTollInquiryByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackOneTimeTollInquiryByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTOneTimeTollInquiryResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTOneTimeTollInquiryResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void FastTrackOneTimeTollPaymentByStoreCompletedEventHandler(object sender, FastTrackOneTimeTollPaymentByStoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FastTrackOneTimeTollPaymentByStoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FastTrackOneTimeTollPaymentByStoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FTOneTimeTollPaymentResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FTOneTimeTollPaymentResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetMerchantBalanceCompletedEventHandler(object sender, GetMerchantBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMerchantBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMerchantBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MerchantBalance Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MerchantBalance)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void MetelePinlessVoidLastLoadCompletedEventHandler(object sender, MetelePinlessVoidLastLoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetelePinlessVoidLastLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MetelePinlessVoidLastLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CreditResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CreditResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessVoidLastLoadCompletedEventHandler(object sender, OKPinlessVoidLastLoadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessVoidLastLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessVoidLastLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CreditResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CreditResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessAddPhoneNumberCompletedEventHandler(object sender, OKPinlessAddPhoneNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessAddPhoneNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessAddPhoneNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessBalanceCompletedEventHandler(object sender, OKPinlessBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessDeletePhoneNumberCompletedEventHandler(object sender, OKPinlessDeletePhoneNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessDeletePhoneNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessDeletePhoneNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessEditPhoneCompletedEventHandler(object sender, OKPinlessEditPhoneCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessEditPhoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessEditPhoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessFindAccountCompletedEventHandler(object sender, OKPinlessFindAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessFindAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessFindAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessGetCallHistoryCompletedEventHandler(object sender, OKPinlessGetCallHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessGetCallHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessGetCallHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CallDetail[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CallDetail[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessGetCreditReasonsCompletedEventHandler(object sender, OKPinlessGetCreditReasonsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessGetCreditReasonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessGetCreditReasonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DebitReason[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DebitReason[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessGetPhoneReportCompletedEventHandler(object sender, OKPinlessGetPhoneReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessGetPhoneReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessGetPhoneReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Report Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Report)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void OKPinlessGetPhoneReportDetailedCompletedEventHandler(object sender, OKPinlessGetPhoneReportDetailedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OKPinlessGetPhoneReportDetailedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OKPinlessGetPhoneReportDetailedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReportDetail[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReportDetail[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void DoPinCreditCompletedEventHandler(object sender, DoPinCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoPinCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoPinCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PinCreditResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PinCreditResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductsCatalogCompletedEventHandler(object sender, GetProductsCatalogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductsCatalogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductsCatalogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Catalog Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Catalog)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetProductProfilesCompletedEventHandler(object sender, GetProductProfilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductProfilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductProfilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Catalog[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Catalog[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetAllDestinationsCompletedEventHandler(object sender, GetAllDestinationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllDestinationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllDestinationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Destination[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Destination[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void GetLegalInformationCompletedEventHandler(object sender, GetLegalInformationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLegalInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLegalInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Legal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Legal)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591